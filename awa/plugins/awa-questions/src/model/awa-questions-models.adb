-----------------------------------------------------------------------
--  AWA.Questions.Models -- AWA.Questions.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
pragma Warnings (On);
package body AWA.Questions.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Question_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => QUESTION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Question_Key;

   function Question_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => QUESTION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Question_Key;

   function "=" (Left, Right : Question_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Question_Ref'Class;
                        Impl   : out Question_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Question_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Question_Ref) is
      Impl : Question_Access;
   begin
      Impl := new Question_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Edit_Date.Is_Null := True;
      Impl.Rating := 0;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Question
   -- ----------------------------------------

   procedure Set_Create_Date (Object : in out Question_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 1, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Question_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Title (Object : in out Question_Ref;
                         Value : in String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Title, Value);
   end Set_Title;

   procedure Set_Title (Object : in out Question_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Title, Value);
   end Set_Title;

   function Get_Title (Object : in Question_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Title);
   end Get_Title;
   function Get_Title (Object : in Question_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Title;
   end Get_Title;


   procedure Set_Description (Object : in out Question_Ref;
                               Value : in String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Description, Value);
   end Set_Description;

   procedure Set_Description (Object : in out Question_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Description, Value);
   end Set_Description;

   function Get_Description (Object : in Question_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Description);
   end Get_Description;
   function Get_Description (Object : in Question_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Description;
   end Get_Description;


   procedure Set_Edit_Date (Object : in out Question_Ref;
                            Value  : in ADO.Nullable_Time) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 4, Impl.Edit_Date, Value);
   end Set_Edit_Date;

   function Get_Edit_Date (Object : in Question_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Edit_Date;
   end Get_Edit_Date;


   procedure Set_Short_Description (Object : in out Question_Ref;
                                     Value : in String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Short_Description, Value);
   end Set_Short_Description;

   procedure Set_Short_Description (Object : in out Question_Ref;
                                    Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Short_Description, Value);
   end Set_Short_Description;

   function Get_Short_Description (Object : in Question_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Short_Description);
   end Get_Short_Description;
   function Get_Short_Description (Object : in Question_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Short_Description;
   end Get_Short_Description;


   procedure Set_Rating (Object : in out Question_Ref;
                         Value  : in Integer) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 6, Impl.Rating, Value);
   end Set_Rating;

   function Get_Rating (Object : in Question_Ref)
                  return Integer is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Rating;
   end Get_Rating;


   procedure Set_Id (Object : in out Question_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 7, Value);
   end Set_Id;

   function Get_Id (Object : in Question_Ref)
                  return ADO.Identifier is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Question_Ref)
                  return Integer is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Author (Object : in out Question_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.Author, Value);
   end Set_Author;

   function Get_Author (Object : in Question_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Author;
   end Get_Author;


   procedure Set_Workspace (Object : in out Question_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Question_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;


   procedure Set_Accepted_Answer (Object : in out Question_Ref;
                                  Value  : in Answer_Ref'Class) is
      Impl : Question_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 11, Impl.Accepted_Answer, Value);
   end Set_Accepted_Answer;

   function Get_Accepted_Answer (Object : in Question_Ref)
                  return Answer_Ref'Class is
      Impl : constant Question_Access
         := Question_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Accepted_Answer;
   end Get_Accepted_Answer;

   --  Copy of the object.
   procedure Copy (Object : in Question_Ref;
                   Into   : in out Question_Ref) is
      Result : Question_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Question_Access
              := Question_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Question_Access
              := new Question_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Title := Impl.Title;
            Copy.Description := Impl.Description;
            Copy.Edit_Date := Impl.Edit_Date;
            Copy.Short_Description := Impl.Short_Description;
            Copy.Rating := Impl.Rating;
            Copy.Version := Impl.Version;
            Copy.Author := Impl.Author;
            Copy.Workspace := Impl.Workspace;
            Copy.Accepted_Answer := Impl.Accepted_Answer;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Question_Access := new Question_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Question_Access := new Question_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Question_Access := new Question_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Question_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Question_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Question_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, QUESTION_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Question_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Question_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Question_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Question_Impl) is
      type Question_Impl_Ptr is access all Question_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Question_Impl, Question_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Question_Impl_Ptr := Question_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, QUESTION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Question_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (QUESTION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  title
                          Value => Object.Title);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  description
                          Value => Object.Description);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  edit_date
                          Value => Object.Edit_Date);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  short_description
                          Value => Object.Short_Description);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  rating
                          Value => Object.Rating);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_1_NAME, --  author_id
                          Value => Object.Author);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_1_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (10);
      end if;
      if Object.Is_Modified (11) then
         Stmt.Save_Field (Name  => COL_10_1_NAME, --  accepted_answer_id
                          Value => Object.Accepted_Answer);
         Object.Clear_Modified (11);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Question_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (QUESTION_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_1_1_NAME, --  title
                        Value => Object.Title);
      Query.Save_Field (Name  => COL_2_1_NAME, --  description
                        Value => Object.Description);
      Query.Save_Field (Name  => COL_3_1_NAME, --  edit_date
                        Value => Object.Edit_Date);
      Query.Save_Field (Name  => COL_4_1_NAME, --  short_description
                        Value => Object.Short_Description);
      Query.Save_Field (Name  => COL_5_1_NAME, --  rating
                        Value => Object.Rating);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_6_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_7_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_8_1_NAME, --  author_id
                        Value => Object.Author);
      Query.Save_Field (Name  => COL_9_1_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Save_Field (Name  => COL_10_1_NAME, --  accepted_answer_id
                        Value => Object.Accepted_Answer);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Question_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (QUESTION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Question_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Question_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Question_Impl (Obj.all)'Access;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (Impl.Title);
      elsif Name = "description" then
         return Util.Beans.Objects.To_Object (Impl.Description);
      elsif Name = "edit_date" then
         if Impl.Edit_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Edit_Date.Value);
         end if;
      elsif Name = "short_description" then
         return Util.Beans.Objects.To_Object (Impl.Short_Description);
      elsif Name = "rating" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Rating));
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Question_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Create_Date := Stmt.Get_Time (0);
      Object.Title := Stmt.Get_Unbounded_String (1);
      Object.Description := Stmt.Get_Unbounded_String (2);
      Object.Edit_Date := Stmt.Get_Nullable_Time (3);
      Object.Short_Description := Stmt.Get_Unbounded_String (4);
      Object.Rating := Stmt.Get_Integer (5);
      Object.Set_Key_Value (Stmt.Get_Identifier (6));
      if not Stmt.Is_Null (8) then
         Object.Author.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      if not Stmt.Is_Null (9) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      if not Stmt.Is_Null (10) then
         Object.Accepted_Answer.Set_Key_Value (Stmt.Get_Identifier (10), Session);
      end if;
      Object.Version := Stmt.Get_Integer (7);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Answer_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ANSWER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Answer_Key;

   function Answer_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ANSWER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Answer_Key;

   function "=" (Left, Right : Answer_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Answer_Ref'Class;
                        Impl   : out Answer_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Answer_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Answer_Ref) is
      Impl : Answer_Access;
   begin
      Impl := new Answer_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Edit_Date.Is_Null := True;
      Impl.Rank := 0;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Answer
   -- ----------------------------------------

   procedure Set_Create_Date (Object : in out Answer_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 1, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Answer_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Edit_Date (Object : in out Answer_Ref;
                            Value  : in ADO.Nullable_Time) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Edit_Date, Value);
   end Set_Edit_Date;

   function Get_Edit_Date (Object : in Answer_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Edit_Date;
   end Get_Edit_Date;


   procedure Set_Answer (Object : in out Answer_Ref;
                          Value : in String) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Answer, Value);
   end Set_Answer;

   procedure Set_Answer (Object : in out Answer_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Answer, Value);
   end Set_Answer;

   function Get_Answer (Object : in Answer_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Answer);
   end Get_Answer;
   function Get_Answer (Object : in Answer_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Answer;
   end Get_Answer;


   procedure Set_Rank (Object : in out Answer_Ref;
                       Value  : in Integer) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 4, Impl.Rank, Value);
   end Set_Rank;

   function Get_Rank (Object : in Answer_Ref)
                  return Integer is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Rank;
   end Get_Rank;


   procedure Set_Id (Object : in out Answer_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 5, Value);
   end Set_Id;

   function Get_Id (Object : in Answer_Ref)
                  return ADO.Identifier is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Answer_Ref)
                  return Integer is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Author (Object : in out Answer_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 7, Impl.Author, Value);
   end Set_Author;

   function Get_Author (Object : in Answer_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Author;
   end Get_Author;


   procedure Set_Question (Object : in out Answer_Ref;
                           Value  : in Question_Ref'Class) is
      Impl : Answer_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Question, Value);
   end Set_Question;

   function Get_Question (Object : in Answer_Ref)
                  return Question_Ref'Class is
      Impl : constant Answer_Access
         := Answer_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Question;
   end Get_Question;

   --  Copy of the object.
   procedure Copy (Object : in Answer_Ref;
                   Into   : in out Answer_Ref) is
      Result : Answer_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Answer_Access
              := Answer_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Answer_Access
              := new Answer_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Edit_Date := Impl.Edit_Date;
            Copy.Answer := Impl.Answer;
            Copy.Rank := Impl.Rank;
            Copy.Version := Impl.Version;
            Copy.Author := Impl.Author;
            Copy.Question := Impl.Question;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Answer_Access := new Answer_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Answer_Access := new Answer_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Answer_Access := new Answer_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Answer_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Answer_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Answer_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, ANSWER_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Answer_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Answer_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Answer_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Answer_Impl) is
      type Answer_Impl_Ptr is access all Answer_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Answer_Impl, Answer_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Answer_Impl_Ptr := Answer_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, ANSWER_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Answer_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (ANSWER_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  edit_date
                          Value => Object.Edit_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  answer
                          Value => Object.Answer);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  rank
                          Value => Object.Rank);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  author_id
                          Value => Object.Author);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  question_id
                          Value => Object.Question);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Answer_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (ANSWER_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_1_2_NAME, --  edit_date
                        Value => Object.Edit_Date);
      Query.Save_Field (Name  => COL_2_2_NAME, --  answer
                        Value => Object.Answer);
      Query.Save_Field (Name  => COL_3_2_NAME, --  rank
                        Value => Object.Rank);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_4_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_5_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_6_2_NAME, --  author_id
                        Value => Object.Author);
      Query.Save_Field (Name  => COL_7_2_NAME, --  question_id
                        Value => Object.Question);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Answer_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (ANSWER_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Answer_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Answer_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Answer_Impl (Obj.all)'Access;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "edit_date" then
         if Impl.Edit_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Edit_Date.Value);
         end if;
      elsif Name = "answer" then
         return Util.Beans.Objects.To_Object (Impl.Answer);
      elsif Name = "rank" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Rank));
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Answer_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Create_Date := Stmt.Get_Time (0);
      Object.Edit_Date := Stmt.Get_Nullable_Time (1);
      Object.Answer := Stmt.Get_Unbounded_String (2);
      Object.Rank := Stmt.Get_Integer (3);
      Object.Set_Key_Value (Stmt.Get_Identifier (4));
      if not Stmt.Is_Null (6) then
         Object.Author.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      if not Stmt.Is_Null (7) then
         Object.Question.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (5);
      ADO.Objects.Set_Created (Object);
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Answer_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "edit_date" then
         if From.Edit_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Edit_Date.Value);
         end if;
      elsif Name = "answer" then
         return Util.Beans.Objects.To_Object (From.Answer);
      elsif Name = "rank" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Rank));
      elsif Name = "user_rating" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.User_Rating));
      elsif Name = "author_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Author_Id));
      elsif Name = "author_name" then
         return Util.Beans.Objects.To_Object (From.Author_Name);
      elsif Name = "author_email" then
         return Util.Beans.Objects.To_Object (From.Author_Email);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Answer_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "edit_date" then
         Item.Edit_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Edit_Date.Is_Null then
            Item.Edit_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "answer" then
         Item.Answer := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "rank" then
         Item.Rank := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "user_rating" then
         Item.User_Rating := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "author_id" then
         Item.Author_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "author_name" then
         Item.Author_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "author_email" then
         Item.Author_Email := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Answer_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of answers.
   --  --------------------
   procedure List (Object  : in out Answer_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Answer_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Answer_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Create_Date := Stmt.Get_Time (1);
         Into.Edit_Date := Stmt.Get_Nullable_Time (2);
         Into.Answer := Stmt.Get_Unbounded_String (3);
         Into.Rank := Stmt.Get_Integer (4);
         Into.User_Rating := Stmt.Get_Integer (5);
         Into.Author_Id := Stmt.Get_Identifier (6);
         Into.Author_Name := Stmt.Get_Unbounded_String (7);
         Into.Author_Email := Stmt.Get_Unbounded_String (8);
      end Read;
   begin
      Stmt.Execute;
      Answer_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Question_Display_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "edit_date" then
         if From.Edit_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Edit_Date.Value);
         end if;
      elsif Name = "description" then
         return Util.Beans.Objects.To_Object (From.Description);
      elsif Name = "rating" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Rating));
      elsif Name = "user_rating" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.User_Rating));
      elsif Name = "author_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Author_Id));
      elsif Name = "author_name" then
         return Util.Beans.Objects.To_Object (From.Author_Name);
      elsif Name = "author_email" then
         return Util.Beans.Objects.To_Object (From.Author_Email);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Question_Display_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "title" then
         Item.Title := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "edit_date" then
         Item.Edit_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Edit_Date.Is_Null then
            Item.Edit_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "description" then
         Item.Description := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "rating" then
         Item.Rating := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "user_rating" then
         Item.User_Rating := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "author_id" then
         Item.Author_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "author_name" then
         Item.Author_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "author_email" then
         Item.Author_Email := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Question_Display_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of questions.
   --  --------------------
   procedure List (Object  : in out Question_Display_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Question_Display_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Question_Display_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Create_Date := Stmt.Get_Time (2);
         Into.Edit_Date := Stmt.Get_Nullable_Time (3);
         Into.Description := Stmt.Get_Unbounded_String (4);
         Into.Rating := Stmt.Get_Integer (5);
         Into.User_Rating := Stmt.Get_Integer (6);
         Into.Author_Id := Stmt.Get_Identifier (7);
         Into.Author_Name := Stmt.Get_Unbounded_String (8);
         Into.Author_Email := Stmt.Get_Unbounded_String (9);
      end Read;
   begin
      Stmt.Execute;
      Question_Display_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Question_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "description" then
         return Util.Beans.Objects.To_Object (From.Description);
      elsif Name = "rating" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Rating));
      elsif Name = "answer_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Answer_Count));
      elsif Name = "author_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Author_Id));
      elsif Name = "author_name" then
         return Util.Beans.Objects.To_Object (From.Author_Name);
      elsif Name = "author_email" then
         return Util.Beans.Objects.To_Object (From.Author_Email);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Question_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "title" then
         Item.Title := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "description" then
         Item.Description := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "rating" then
         Item.Rating := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "answer_count" then
         Item.Answer_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "author_id" then
         Item.Author_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "author_name" then
         Item.Author_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "author_email" then
         Item.Author_Email := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Question_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of questions.
   --  --------------------
   procedure List (Object  : in out Question_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Question_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Question_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Create_Date := Stmt.Get_Time (2);
         Into.Description := Stmt.Get_Unbounded_String (3);
         Into.Rating := Stmt.Get_Integer (4);
         Into.Answer_Count := Stmt.Get_Integer (5);
         Into.Author_Id := Stmt.Get_Identifier (6);
         Into.Author_Name := Stmt.Get_Unbounded_String (7);
         Into.Author_Email := Stmt.Get_Unbounded_String (8);
      end Read;
   begin
      Stmt.Execute;
      Question_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   procedure Op_Save (Bean    : in out Question_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Question_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Question_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Question_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Question_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Delete (Bean    : in out Question_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Delete (Bean    : in out Question_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Question_Bean'Class (Bean).Delete (Outcome);
   end Op_Delete;
   package Binding_Question_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Question_Bean,
                                                      Method => Op_Delete,
                                                      Name   => "delete");
   procedure Op_Load (Bean    : in out Question_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Question_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Question_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Question_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Question_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Question_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Question_Bean_1.Proxy'Access,
         2 => Binding_Question_Bean_2.Proxy'Access,
         3 => Binding_Question_Bean_3.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Question_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Question_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Question_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "title" then
         Item.Set_Title (Util.Beans.Objects.To_String (Value));
      elsif Name = "description" then
         Item.Set_Description (Util.Beans.Objects.To_String (Value));
      elsif Name = "edit_date" then
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_Edit_Date (ADO.Nullable_Time '(Is_Null => True, others => <>));
         else
            Item.Set_Edit_Date (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      elsif Name = "short_description" then
         Item.Set_Short_Description (Util.Beans.Objects.To_String (Value));
      elsif Name = "rating" then
         Item.Set_Rating (Util.Beans.Objects.To_Integer (Value));
      end if;
   end Set_Value;

   procedure Op_Save (Bean    : in out Answer_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Answer_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Answer_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Answer_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Answer_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Delete (Bean    : in out Answer_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Delete (Bean    : in out Answer_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Answer_Bean'Class (Bean).Delete (Outcome);
   end Op_Delete;
   package Binding_Answer_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Answer_Bean,
                                                      Method => Op_Delete,
                                                      Name   => "delete");
   procedure Op_Load (Bean    : in out Answer_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Answer_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Answer_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Answer_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Answer_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Answer_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Answer_Bean_1.Proxy'Access,
         2 => Binding_Answer_Bean_2.Proxy'Access,
         3 => Binding_Answer_Bean_3.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Answer_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Answer_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Answer_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "edit_date" then
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_Edit_Date (ADO.Nullable_Time '(Is_Null => True, others => <>));
         else
            Item.Set_Edit_Date (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      elsif Name = "answer" then
         Item.Set_Answer (Util.Beans.Objects.To_String (Value));
      elsif Name = "rank" then
         Item.Set_Rank (Util.Beans.Objects.To_Integer (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Question_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Question_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Question_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Question_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Question_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Question_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Question_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Question_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Question_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Question_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "tag" then
         return Util.Beans.Objects.To_Object (From.Tag);
      elsif Name = "page" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page));
      elsif Name = "page_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Size));
      elsif Name = "count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Question_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "tag" then
         Item.Tag := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "page" then
         Item.Page := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "page_size" then
         Item.Page_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "count" then
         Item.Count := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Question_Display_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Question_Display_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Question_Display_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Question_Display_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Question_Display_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Question_Display_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Question_Display_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Question_Display_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Question_Display_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Question_Display_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Question_Display_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      null;
   end Set_Value;


end AWA.Questions.Models;
