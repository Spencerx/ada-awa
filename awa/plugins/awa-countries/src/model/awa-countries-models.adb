-----------------------------------------------------------------------
--  AWA.Countries.Models -- AWA.Countries.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
pragma Warnings (On);
package body AWA.Countries.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Country_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => COUNTRY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Country_Key;

   function Country_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => COUNTRY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Country_Key;

   function "=" (Left, Right : Country_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Country_Ref'Class;
                        Impl   : out Country_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Country_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Country_Ref) is
      Impl : Country_Access;
   begin
      Impl := new Country_Impl;
      Impl.Geonameid := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Country
   -- ----------------------------------------

   procedure Set_Id (Object : in out Country_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Country_Ref)
                  return ADO.Identifier is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Country_Ref;
                        Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Country_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Continent (Object : in out Country_Ref;
                             Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Continent, Value);
   end Set_Continent;

   procedure Set_Continent (Object : in out Country_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Continent, Value);
   end Set_Continent;

   function Get_Continent (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Continent);
   end Get_Continent;
   function Get_Continent (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Continent;
   end Get_Continent;


   procedure Set_Currency (Object : in out Country_Ref;
                            Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Currency, Value);
   end Set_Currency;

   procedure Set_Currency (Object : in out Country_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Currency, Value);
   end Set_Currency;

   function Get_Currency (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Currency);
   end Get_Currency;
   function Get_Currency (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Currency;
   end Get_Currency;


   procedure Set_Iso_Code (Object : in out Country_Ref;
                            Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Iso_Code, Value);
   end Set_Iso_Code;

   procedure Set_Iso_Code (Object : in out Country_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Iso_Code, Value);
   end Set_Iso_Code;

   function Get_Iso_Code (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Iso_Code);
   end Get_Iso_Code;
   function Get_Iso_Code (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Iso_Code;
   end Get_Iso_Code;


   procedure Set_Geonameid (Object : in out Country_Ref;
                            Value  : in Integer) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 6, Impl.Geonameid, Value);
   end Set_Geonameid;

   function Get_Geonameid (Object : in Country_Ref)
                  return Integer is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Geonameid;
   end Get_Geonameid;


   procedure Set_Languages (Object : in out Country_Ref;
                             Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 7, Impl.Languages, Value);
   end Set_Languages;

   procedure Set_Languages (Object : in out Country_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 7, Impl.Languages, Value);
   end Set_Languages;

   function Get_Languages (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Languages);
   end Get_Languages;
   function Get_Languages (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Languages;
   end Get_Languages;


   procedure Set_Tld (Object : in out Country_Ref;
                       Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 8, Impl.Tld, Value);
   end Set_Tld;

   procedure Set_Tld (Object : in out Country_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 8, Impl.Tld, Value);
   end Set_Tld;

   function Get_Tld (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Tld);
   end Get_Tld;
   function Get_Tld (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Tld;
   end Get_Tld;


   procedure Set_Currency_Code (Object : in out Country_Ref;
                                 Value : in String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 9, Impl.Currency_Code, Value);
   end Set_Currency_Code;

   procedure Set_Currency_Code (Object : in out Country_Ref;
                                Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Country_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 9, Impl.Currency_Code, Value);
   end Set_Currency_Code;

   function Get_Currency_Code (Object : in Country_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Currency_Code);
   end Get_Currency_Code;
   function Get_Currency_Code (Object : in Country_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Country_Access
         := Country_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Currency_Code;
   end Get_Currency_Code;

   --  Copy of the object.
   procedure Copy (Object : in Country_Ref;
                   Into   : in out Country_Ref) is
      Result : Country_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Country_Access
              := Country_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Country_Access
              := new Country_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Continent := Impl.Continent;
            Copy.Currency := Impl.Currency;
            Copy.Iso_Code := Impl.Iso_Code;
            Copy.Geonameid := Impl.Geonameid;
            Copy.Languages := Impl.Languages;
            Copy.Tld := Impl.Tld;
            Copy.Currency_Code := Impl.Currency_Code;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Country_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Country_Access := new Country_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Country_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Country_Access := new Country_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Country_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Country_Access := new Country_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Country_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Country_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Country_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Country_Impl) is
      type Country_Impl_Ptr is access all Country_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Country_Impl, Country_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Country_Impl_Ptr := Country_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Country_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, COUNTRY_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Country_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Country_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (COUNTRY_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  continent
                          Value => Object.Continent);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  currency
                          Value => Object.Currency);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  iso_code
                          Value => Object.Iso_Code);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  geonameid
                          Value => Object.Geonameid);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  languages
                          Value => Object.Languages);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  tld
                          Value => Object.Tld);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_1_NAME, --  currency_code
                          Value => Object.Currency_Code);
         Object.Clear_Modified (9);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Country_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (COUNTRY_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_1_NAME, --  continent
                        Value => Object.Continent);
      Query.Save_Field (Name  => COL_3_1_NAME, --  currency
                        Value => Object.Currency);
      Query.Save_Field (Name  => COL_4_1_NAME, --  iso_code
                        Value => Object.Iso_Code);
      Query.Save_Field (Name  => COL_5_1_NAME, --  geonameid
                        Value => Object.Geonameid);
      Query.Save_Field (Name  => COL_6_1_NAME, --  languages
                        Value => Object.Languages);
      Query.Save_Field (Name  => COL_7_1_NAME, --  tld
                        Value => Object.Tld);
      Query.Save_Field (Name  => COL_8_1_NAME, --  currency_code
                        Value => Object.Currency_Code);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Country_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (COUNTRY_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Country_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Country_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Country_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "continent" then
         return Util.Beans.Objects.To_Object (Impl.Continent);
      elsif Name = "currency" then
         return Util.Beans.Objects.To_Object (Impl.Currency);
      elsif Name = "iso_code" then
         return Util.Beans.Objects.To_Object (Impl.Iso_Code);
      elsif Name = "geonameid" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Geonameid));
      elsif Name = "languages" then
         return Util.Beans.Objects.To_Object (Impl.Languages);
      elsif Name = "tld" then
         return Util.Beans.Objects.To_Object (Impl.Tld);
      elsif Name = "currency_code" then
         return Util.Beans.Objects.To_Object (Impl.Currency_Code);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Country_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Continent := Stmt.Get_Unbounded_String (2);
      Object.Currency := Stmt.Get_Unbounded_String (3);
      Object.Iso_Code := Stmt.Get_Unbounded_String (4);
      Object.Geonameid := Stmt.Get_Integer (5);
      Object.Languages := Stmt.Get_Unbounded_String (6);
      Object.Tld := Stmt.Get_Unbounded_String (7);
      Object.Currency_Code := Stmt.Get_Unbounded_String (8);
      ADO.Objects.Set_Created (Object);
   end Load;
   function City_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => CITY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end City_Key;

   function City_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => CITY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end City_Key;

   function "=" (Left, Right : City_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out City_Ref'Class;
                        Impl   : out City_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := City_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out City_Ref) is
      Impl : City_Access;
   begin
      Impl := new City_Impl;
      Impl.Zip_Code := 0;
      Impl.Latitude := 0;
      Impl.Longitude := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: City
   -- ----------------------------------------

   procedure Set_Id (Object : in out City_Ref;
                     Value  : in ADO.Identifier) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in City_Ref)
                  return ADO.Identifier is
      Impl : constant City_Access
         := City_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out City_Ref;
                        Value : in String) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out City_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in City_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in City_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Zip_Code (Object : in out City_Ref;
                           Value  : in Integer) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 3, Impl.Zip_Code, Value);
   end Set_Zip_Code;

   function Get_Zip_Code (Object : in City_Ref)
                  return Integer is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Zip_Code;
   end Get_Zip_Code;


   procedure Set_Latitude (Object : in out City_Ref;
                           Value  : in Integer) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 4, Impl.Latitude, Value);
   end Set_Latitude;

   function Get_Latitude (Object : in City_Ref)
                  return Integer is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Latitude;
   end Get_Latitude;


   procedure Set_Longitude (Object : in out City_Ref;
                            Value  : in Integer) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 5, Impl.Longitude, Value);
   end Set_Longitude;

   function Get_Longitude (Object : in City_Ref)
                  return Integer is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Longitude;
   end Get_Longitude;


   procedure Set_Region (Object : in out City_Ref;
                         Value  : in Region_Ref'Class) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.Region, Value);
   end Set_Region;

   function Get_Region (Object : in City_Ref)
                  return Region_Ref'Class is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Region;
   end Get_Region;


   procedure Set_Country (Object : in out City_Ref;
                          Value  : in Country_Ref'Class) is
      Impl : City_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 7, Impl.Country, Value);
   end Set_Country;

   function Get_Country (Object : in City_Ref)
                  return Country_Ref'Class is
      Impl : constant City_Access
         := City_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Country;
   end Get_Country;

   --  Copy of the object.
   procedure Copy (Object : in City_Ref;
                   Into   : in out City_Ref) is
      Result : City_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant City_Access
              := City_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant City_Access
              := new City_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Zip_Code := Impl.Zip_Code;
            Copy.Latitude := Impl.Latitude;
            Copy.Longitude := Impl.Longitude;
            Copy.Region := Impl.Region;
            Copy.Country := Impl.Country;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out City_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant City_Access := new City_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out City_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant City_Access := new City_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out City_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant City_Access := new City_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out City_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new City_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out City_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access City_Impl) is
      type City_Impl_Ptr is access all City_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (City_Impl, City_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : City_Impl_Ptr := City_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out City_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, CITY_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out City_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out City_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (CITY_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  zip_code
                          Value => Object.Zip_Code);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  latitude
                          Value => Object.Latitude);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  longitude
                          Value => Object.Longitude);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  region_id
                          Value => Object.Region);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  country_id
                          Value => Object.Country);
         Object.Clear_Modified (7);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out City_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (CITY_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_2_NAME, --  zip_code
                        Value => Object.Zip_Code);
      Query.Save_Field (Name  => COL_3_2_NAME, --  latitude
                        Value => Object.Latitude);
      Query.Save_Field (Name  => COL_4_2_NAME, --  longitude
                        Value => Object.Longitude);
      Query.Save_Field (Name  => COL_5_2_NAME, --  region_id
                        Value => Object.Region);
      Query.Save_Field (Name  => COL_6_2_NAME, --  country_id
                        Value => Object.Country);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out City_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (CITY_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in City_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access City_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := City_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "zip_code" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Zip_Code));
      elsif Name = "latitude" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Latitude));
      elsif Name = "longitude" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Longitude));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out City_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Zip_Code := Stmt.Get_Integer (2);
      Object.Latitude := Stmt.Get_Integer (3);
      Object.Longitude := Stmt.Get_Integer (4);
      if not Stmt.Is_Null (5) then
         Object.Region.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      if not Stmt.Is_Null (6) then
         Object.Country.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;
   function Country_Neighbor_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => COUNTRY_NEIGHBOR_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Country_Neighbor_Key;

   function Country_Neighbor_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => COUNTRY_NEIGHBOR_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Country_Neighbor_Key;

   function "=" (Left, Right : Country_Neighbor_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Country_Neighbor_Ref'Class;
                        Impl   : out Country_Neighbor_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Country_Neighbor_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Country_Neighbor_Ref) is
      Impl : Country_Neighbor_Access;
   begin
      Impl := new Country_Neighbor_Impl;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Country_Neighbor
   -- ----------------------------------------

   procedure Set_Id (Object : in out Country_Neighbor_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Country_Neighbor_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Country_Neighbor_Ref)
                  return ADO.Identifier is
      Impl : constant Country_Neighbor_Access
         := Country_Neighbor_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Neighbor_Of (Object : in out Country_Neighbor_Ref;
                              Value  : in Country_Ref'Class) is
      Impl : Country_Neighbor_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 2, Impl.Neighbor_Of, Value);
   end Set_Neighbor_Of;

   function Get_Neighbor_Of (Object : in Country_Neighbor_Ref)
                  return Country_Ref'Class is
      Impl : constant Country_Neighbor_Access
         := Country_Neighbor_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Neighbor_Of;
   end Get_Neighbor_Of;


   procedure Set_Neighbor (Object : in out Country_Neighbor_Ref;
                           Value  : in Country_Ref'Class) is
      Impl : Country_Neighbor_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 3, Impl.Neighbor, Value);
   end Set_Neighbor;

   function Get_Neighbor (Object : in Country_Neighbor_Ref)
                  return Country_Ref'Class is
      Impl : constant Country_Neighbor_Access
         := Country_Neighbor_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Neighbor;
   end Get_Neighbor;

   --  Copy of the object.
   procedure Copy (Object : in Country_Neighbor_Ref;
                   Into   : in out Country_Neighbor_Ref) is
      Result : Country_Neighbor_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Country_Neighbor_Access
              := Country_Neighbor_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Country_Neighbor_Access
              := new Country_Neighbor_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Neighbor_Of := Impl.Neighbor_Of;
            Copy.Neighbor := Impl.Neighbor;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Country_Neighbor_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Country_Neighbor_Access := new Country_Neighbor_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Country_Neighbor_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Country_Neighbor_Access := new Country_Neighbor_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Country_Neighbor_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Country_Neighbor_Access := new Country_Neighbor_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Country_Neighbor_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Country_Neighbor_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Country_Neighbor_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Country_Neighbor_Impl) is
      type Country_Neighbor_Impl_Ptr is access all Country_Neighbor_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Country_Neighbor_Impl, Country_Neighbor_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Country_Neighbor_Impl_Ptr := Country_Neighbor_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Country_Neighbor_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, COUNTRY_NEIGHBOR_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Country_Neighbor_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Country_Neighbor_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (COUNTRY_NEIGHBOR_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  neighbor_of_id
                          Value => Object.Neighbor_Of);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  neighbor_id
                          Value => Object.Neighbor);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Country_Neighbor_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (COUNTRY_NEIGHBOR_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  neighbor_of_id
                        Value => Object.Neighbor_Of);
      Query.Save_Field (Name  => COL_2_3_NAME, --  neighbor_id
                        Value => Object.Neighbor);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Country_Neighbor_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (COUNTRY_NEIGHBOR_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Country_Neighbor_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Country_Neighbor_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Country_Neighbor_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Country_Neighbor_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      if not Stmt.Is_Null (1) then
         Object.Neighbor_Of.Set_Key_Value (Stmt.Get_Identifier (1), Session);
      end if;
      if not Stmt.Is_Null (2) then
         Object.Neighbor.Set_Key_Value (Stmt.Get_Identifier (2), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;
   function Region_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => REGION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Region_Key;

   function Region_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => REGION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Region_Key;

   function "=" (Left, Right : Region_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Region_Ref'Class;
                        Impl   : out Region_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Region_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Region_Ref) is
      Impl : Region_Access;
   begin
      Impl := new Region_Impl;
      Impl.Geonameid := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Region
   -- ----------------------------------------

   procedure Set_Id (Object : in out Region_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Region_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Region_Ref)
                  return ADO.Identifier is
      Impl : constant Region_Access
         := Region_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Region_Ref;
                        Value : in String) is
      Impl : Region_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Region_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Region_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Region_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Region_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Region_Access
         := Region_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Geonameid (Object : in out Region_Ref;
                            Value  : in Integer) is
      Impl : Region_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 3, Impl.Geonameid, Value);
   end Set_Geonameid;

   function Get_Geonameid (Object : in Region_Ref)
                  return Integer is
      Impl : constant Region_Access
         := Region_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Geonameid;
   end Get_Geonameid;


   procedure Set_Country (Object : in out Region_Ref;
                          Value  : in Country_Ref'Class) is
      Impl : Region_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 4, Impl.Country, Value);
   end Set_Country;

   function Get_Country (Object : in Region_Ref)
                  return Country_Ref'Class is
      Impl : constant Region_Access
         := Region_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Country;
   end Get_Country;

   --  Copy of the object.
   procedure Copy (Object : in Region_Ref;
                   Into   : in out Region_Ref) is
      Result : Region_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Region_Access
              := Region_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Region_Access
              := new Region_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Geonameid := Impl.Geonameid;
            Copy.Country := Impl.Country;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Region_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Region_Access := new Region_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Region_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Region_Access := new Region_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Region_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Region_Access := new Region_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Region_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Region_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Region_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Region_Impl) is
      type Region_Impl_Ptr is access all Region_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Region_Impl, Region_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Region_Impl_Ptr := Region_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Region_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, REGION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Region_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Region_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (REGION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_4_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_4_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_4_NAME, --  geonameid
                          Value => Object.Geonameid);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_4_NAME, --  country_id
                          Value => Object.Country);
         Object.Clear_Modified (4);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Region_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (REGION_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_4_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_4_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_4_NAME, --  geonameid
                        Value => Object.Geonameid);
      Query.Save_Field (Name  => COL_3_4_NAME, --  country_id
                        Value => Object.Country);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Region_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (REGION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Region_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Region_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Region_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "geonameid" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Geonameid));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Region_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Geonameid := Stmt.Get_Integer (2);
      if not Stmt.Is_Null (3) then
         Object.Country.Set_Key_Value (Stmt.Get_Identifier (3), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;


end AWA.Countries.Models;
