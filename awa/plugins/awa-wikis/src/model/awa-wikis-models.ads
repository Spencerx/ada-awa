-----------------------------------------------------------------------
--  AWA.Wikis.Models -- AWA.Wikis.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with ADO.Queries;
with ADO.Queries.Loaders;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Objects.Enums;
with Util.Beans.Basic.Lists;
with ADO.Audits;
with AWA.Images.Models;
with AWA.Storages.Models;
with AWA.Users.Models;
with AWA.Workspaces.Models;
with Util.Beans.Methods;
pragma Warnings (On);
package AWA.Wikis.Models is

   pragma Style_Checks ("-mrIu");

   type Format_Type is (FORMAT_CREOLE, FORMAT_HTML, FORMAT_MARKDOWN, FORMAT_DOTCLEAR, FORMAT_MEDIAWIKI, FORMAT_PHPBB);
   for Format_Type use (FORMAT_CREOLE => 0, FORMAT_HTML => 1, FORMAT_MARKDOWN => 2, FORMAT_DOTCLEAR => 3, FORMAT_MEDIAWIKI => 4, FORMAT_PHPBB => 5);
   package Format_Type_Objects is
      new Util.Beans.Objects.Enums (Format_Type);

   type Nullable_Format_Type is record
      Is_Null : Boolean := True;
      Value   : Format_Type;
   end record;

   type Wiki_Content_Ref is new ADO.Objects.Object_Ref with null record;

   type Wiki_Space_Ref is new ADO.Objects.Object_Ref with null record;

   type Wiki_Page_Ref is new ADO.Objects.Object_Ref with null record;

   --  Create an object key for Wiki_Content.
   function Wiki_Content_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Wiki_Content from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Wiki_Content_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Wiki_Content : constant Wiki_Content_Ref;
   function "=" (Left, Right : Wiki_Content_Ref'Class) return Boolean;

   --  Set the wiki page content identifier
   procedure Set_Id (Object : in out Wiki_Content_Ref;
                     Value  : in ADO.Identifier);

   --  Get the wiki page content identifier
   function Get_Id (Object : in Wiki_Content_Ref)
                 return ADO.Identifier;

   --  Set the wiki content creation date
   procedure Set_Create_Date (Object : in out Wiki_Content_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the wiki content creation date
   function Get_Create_Date (Object : in Wiki_Content_Ref)
                 return Ada.Calendar.Time;

   --  Set the wiki text content
   procedure Set_Content (Object : in out Wiki_Content_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Content (Object : in out Wiki_Content_Ref;
                          Value : in String);

   --  Get the wiki text content
   function Get_Content (Object : in Wiki_Content_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Content (Object : in Wiki_Content_Ref)
                 return String;

   --  Set the format type used used by the wiki content
   procedure Set_Format (Object : in out Wiki_Content_Ref;
                         Value  : in Format_Type);

   --  Get the format type used used by the wiki content
   function Get_Format (Object : in Wiki_Content_Ref)
                 return Format_Type;

   --  Set the content comment string
   procedure Set_Save_Comment (Object : in out Wiki_Content_Ref;
                               Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Save_Comment (Object : in out Wiki_Content_Ref;
                               Value : in String);

   --  Get the content comment string
   function Get_Save_Comment (Object : in Wiki_Content_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Save_Comment (Object : in Wiki_Content_Ref)
                 return String;
   --
   function Get_Version (Object : in Wiki_Content_Ref)
                 return Integer;

   --  Set the wiki page version
   procedure Set_Page_Version (Object : in out Wiki_Content_Ref;
                               Value  : in Integer);

   --  Get the wiki page version
   function Get_Page_Version (Object : in Wiki_Content_Ref)
                 return Integer;

   --  Set the wiki page that this Wiki_Content belongs to
   procedure Set_Page_Id (Object : in out Wiki_Content_Ref;
                          Value  : in ADO.Identifier);

   --  Get the wiki page that this Wiki_Content belongs to
   function Get_Page_Id (Object : in Wiki_Content_Ref)
                 return ADO.Identifier;

   --  Set the page version author
   procedure Set_Author (Object : in out Wiki_Content_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the page version author
   function Get_Author (Object : in Wiki_Content_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Reload from the database the same object if it was modified.
   --  Returns True in `Updated` if the object was reloaded.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Reload (Object  : in out Wiki_Content_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Wiki_Content_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Wiki_Content_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   WIKI_CONTENT_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Content_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Content_Ref;
                   Into   : in out Wiki_Content_Ref);

   --  --------------------
   --  Permission is granted to display a wiki page if there is
   --  an ACL entry between the wiki space and the user.
   --  --------------------
   --  Create an object key for Wiki_Space.
   function Wiki_Space_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Wiki_Space from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Wiki_Space_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Wiki_Space : constant Wiki_Space_Ref;
   function "=" (Left, Right : Wiki_Space_Ref'Class) return Boolean;

   --  Set the wiki space identifier
   procedure Set_Id (Object : in out Wiki_Space_Ref;
                     Value  : in ADO.Identifier);

   --  Get the wiki space identifier
   function Get_Id (Object : in Wiki_Space_Ref)
                 return ADO.Identifier;

   --  Set the wiki name
   procedure Set_Name (Object : in out Wiki_Space_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Wiki_Space_Ref;
                       Value : in String);

   --  Get the wiki name
   function Get_Name (Object : in Wiki_Space_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Wiki_Space_Ref)
                 return String;

   --  Set whether the wiki is public
   procedure Set_Is_Public (Object : in out Wiki_Space_Ref;
                            Value  : in Boolean);

   --  Get whether the wiki is public
   function Get_Is_Public (Object : in Wiki_Space_Ref)
                 return Boolean;
   --
   function Get_Version (Object : in Wiki_Space_Ref)
                 return Integer;

   --  Set the wiki creation date.
   procedure Set_Create_Date (Object : in out Wiki_Space_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the wiki creation date.
   function Get_Create_Date (Object : in Wiki_Space_Ref)
                 return Ada.Calendar.Time;

   --  Set the left panel side wiki text for every page.
   procedure Set_Left_Side (Object : in out Wiki_Space_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Left_Side (Object : in out Wiki_Space_Ref;
                            Value : in String);

   --  Get the left panel side wiki text for every page.
   function Get_Left_Side (Object : in Wiki_Space_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Left_Side (Object : in Wiki_Space_Ref)
                 return String;

   --  Set the right panel wiki text for every page.
   procedure Set_Right_Side (Object : in out Wiki_Space_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Right_Side (Object : in out Wiki_Space_Ref;
                             Value : in String);

   --  Get the right panel wiki text for every page.
   function Get_Right_Side (Object : in Wiki_Space_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Right_Side (Object : in Wiki_Space_Ref)
                 return String;

   --  Set the default wiki page format.
   procedure Set_Format (Object : in out Wiki_Space_Ref;
                         Value  : in Format_Type);

   --  Get the default wiki page format.
   function Get_Format (Object : in Wiki_Space_Ref)
                 return Format_Type;

   --
   procedure Set_Workspace (Object : in out Wiki_Space_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class);

   --
   function Get_Workspace (Object : in Wiki_Space_Ref)
                 return AWA.Workspaces.Models.Workspace_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Reload from the database the same object if it was modified.
   --  Returns True in `Updated` if the object was reloaded.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Reload (Object  : in out Wiki_Space_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Wiki_Space_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Wiki_Space_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   WIKI_SPACE_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Space_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Space_Ref;
                   Into   : in out Wiki_Space_Ref);

   --  --------------------
   --  The wiki page represents a page with its versions.
   --  It refers to the last version which is currently visible.
   --  It has an optional preview image which defines
   --  the thumbnail preview of the last/current wiki content.
   --  --------------------
   --  Create an object key for Wiki_Page.
   function Wiki_Page_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Wiki_Page from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Wiki_Page_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Wiki_Page : constant Wiki_Page_Ref;
   function "=" (Left, Right : Wiki_Page_Ref'Class) return Boolean;

   --  Set the wiki page identifier
   procedure Set_Id (Object : in out Wiki_Page_Ref;
                     Value  : in ADO.Identifier);

   --  Get the wiki page identifier
   function Get_Id (Object : in Wiki_Page_Ref)
                 return ADO.Identifier;

   --  Set the wiki page name
   procedure Set_Name (Object : in out Wiki_Page_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Wiki_Page_Ref;
                       Value : in String);

   --  Get the wiki page name
   function Get_Name (Object : in Wiki_Page_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Wiki_Page_Ref)
                 return String;

   --  Set the last page version number
   procedure Set_Last_Version (Object : in out Wiki_Page_Ref;
                               Value  : in Integer);

   --  Get the last page version number
   function Get_Last_Version (Object : in Wiki_Page_Ref)
                 return Integer;

   --  Set whether the wiki page is public
   procedure Set_Is_Public (Object : in out Wiki_Page_Ref;
                            Value  : in Boolean);

   --  Get whether the wiki page is public
   function Get_Is_Public (Object : in Wiki_Page_Ref)
                 return Boolean;

   --  Set the page title
   procedure Set_Title (Object : in out Wiki_Page_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Title (Object : in out Wiki_Page_Ref;
                        Value : in String);

   --  Get the page title
   function Get_Title (Object : in Wiki_Page_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Title (Object : in Wiki_Page_Ref)
                 return String;
   --
   function Get_Version (Object : in Wiki_Page_Ref)
                 return Integer;

   --  Set a read counter which indicates how many times the page was read.
   procedure Set_Read_Count (Object : in out Wiki_Page_Ref;
                             Value  : in Integer);

   --  Get a read counter which indicates how many times the page was read.
   function Get_Read_Count (Object : in Wiki_Page_Ref)
                 return Integer;

   --  Set the wiki page preview.
   procedure Set_Preview (Object : in out Wiki_Page_Ref;
                          Value  : in AWA.Images.Models.Image_Ref'Class);

   --  Get the wiki page preview.
   function Get_Preview (Object : in Wiki_Page_Ref)
                 return AWA.Images.Models.Image_Ref'Class;

   --  Set the wiki space that this page belongs to
   procedure Set_Wiki (Object : in out Wiki_Page_Ref;
                       Value  : in Wiki_Space_Ref'Class);

   --  Get the wiki space that this page belongs to
   function Get_Wiki (Object : in Wiki_Page_Ref)
                 return Wiki_Space_Ref'Class;

   --  Set the current content (or last version)
   procedure Set_Content (Object : in out Wiki_Page_Ref;
                          Value  : in Wiki_Content_Ref'Class);

   --  Get the current content (or last version)
   function Get_Content (Object : in Wiki_Page_Ref)
                 return Wiki_Content_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Reload from the database the same object if it was modified.
   --  Returns True in `Updated` if the object was reloaded.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Reload (Object  : in out Wiki_Page_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Wiki_Page_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Wiki_Page_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   WIKI_PAGE_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Page_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Page_Ref;
                   Into   : in out Wiki_Page_Ref);



   Query_Page_Access_Stats : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The information about an image used in a wiki page.
   --  --------------------
   type Wiki_Image_Bean is abstract
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the image folder identifier.
      Folder_Id : ADO.Identifier;

      --  the image file identifier.
      Id : ADO.Identifier;

      --  the file creation date.
      Create_Date : ADO.Nullable_Time;

      --  the file storage URI.
      Uri : ADO.Nullable_String;

      --  the file storage URI.
      Storage : AWA.Storages.Models.Storage_Type;

      --  the file mime type.
      Mime_Type : ADO.Nullable_String;

      --  the file size.
      File_Size : ADO.Nullable_Integer;

      --  the image width.
      Width : ADO.Nullable_Integer;

      --  the image height.
      Height : ADO.Nullable_Integer;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Image_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Image_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Image_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Wiki_Image_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   procedure Read (Into : in out Wiki_Image_Bean;
                   Stmt : in out ADO.Statements.Query_Statement'Class);

   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   procedure Load (Object  : in out Wiki_Image_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_Image : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The information about an image used in a wiki page.
   --  --------------------
   type Wiki_Image_Info is
     new Util.Beans.Basic.Bean with  record

      --  the image folder identifier.
      Folder_Id : ADO.Identifier;

      --  the image file identifier.
      Id : ADO.Identifier;

      --  the file creation date.
      Create_Date : ADO.Nullable_Time;

      --  the file storage URI.
      Uri : ADO.Nullable_String;

      --  the file storage URI.
      Storage : AWA.Storages.Models.Storage_Type;

      --  the file mime type.
      Mime_Type : ADO.Nullable_String;

      --  the file size.
      File_Size : ADO.Nullable_Integer;

      --  the image width.
      Width : ADO.Nullable_Integer;

      --  the image height.
      Height : ADO.Nullable_Integer;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Image_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Image_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package Wiki_Image_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Wiki_Image_Info);
   package Wiki_Image_Info_Vectors renames Wiki_Image_Info_Beans.Vectors;
   subtype Wiki_Image_Info_List_Bean is Wiki_Image_Info_Beans.List_Bean;

   type Wiki_Image_Info_List_Bean_Access is access all Wiki_Image_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Image_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Wiki_Image_Info_Vector is Wiki_Image_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Image_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_Image_Get_Data : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Image_Width_Get_Data : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Image_Height_Get_Data : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The list of wikis.
   --  --------------------
   type Wiki_Info is
     new Util.Beans.Basic.Bean with  record

      --  the wiki space identifier.
      Id : ADO.Identifier;

      --  the wiki name.
      Name : Ada.Strings.Unbounded.Unbounded_String;

      --  whether the wiki is public.
      Is_Public : Boolean;

      --  the wiki creation date.
      Create_Date : Ada.Calendar.Time;

      --  the number of pages in the wiki.
      Page_Count : Integer;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package Wiki_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Wiki_Info);
   package Wiki_Info_Vectors renames Wiki_Info_Beans.Vectors;
   subtype Wiki_Info_List_Bean is Wiki_Info_Beans.List_Bean;

   type Wiki_Info_List_Bean_Access is access all Wiki_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Wiki_Info_Vector is Wiki_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_List : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The information about a wiki page.
   --  --------------------
   type Wiki_Page_Info is
     new Util.Beans.Basic.Bean with  record

      --  the wiki page identifier.
      Id : ADO.Identifier;

      --  the wiki page name.
      Name : Ada.Strings.Unbounded.Unbounded_String;

      --  the wiki page title.
      Title : Ada.Strings.Unbounded.Unbounded_String;

      --  whether the wiki is public.
      Is_Public : Boolean;

      --  the last version.
      Last_Version : Integer;

      --  the read count.
      Read_Count : Integer;

      --  the wiki creation date.
      Create_Date : Ada.Calendar.Time;

      --  the wiki page author.
      Author : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Page_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package Wiki_Page_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Wiki_Page_Info);
   package Wiki_Page_Info_Vectors renames Wiki_Page_Info_Beans.Vectors;
   subtype Wiki_Page_Info_List_Bean is Wiki_Page_Info_Beans.List_Bean;

   type Wiki_Page_Info_List_Bean_Access is access all Wiki_Page_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Page_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Wiki_Page_Info_Vector is Wiki_Page_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Page_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_Page_List : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Page_Tag_List : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The information about a wiki page version.
   --  --------------------
   type Wiki_Version_Info is
     new Util.Beans.Basic.Bean with  record

      --  the wiki page identifier.
      Id : ADO.Identifier;

      --  the wiki page version comment.
      Comment : Ada.Strings.Unbounded.Unbounded_String;

      --  the wiki page creation date.
      Create_Date : Ada.Calendar.Time;

      --  the page version.
      Page_Version : Integer;

      --  the wiki page author.
      Author : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Version_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Version_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package Wiki_Version_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Wiki_Version_Info);
   package Wiki_Version_Info_Vectors renames Wiki_Version_Info_Beans.Vectors;
   subtype Wiki_Version_Info_List_Bean is Wiki_Version_Info_Beans.List_Bean;

   type Wiki_Version_Info_List_Bean_Access is access all Wiki_Version_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Version_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Wiki_Version_Info_Vector is Wiki_Version_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Wiki_Version_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_Version_List : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The information about a wiki page.
   --  --------------------
   type Wiki_View_Info is abstract
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the wiki page identifier.
      Id : ADO.Identifier;

      --  the wiki page name.
      Name : ADO.Nullable_String;

      --  the wiki page title.
      Title : ADO.Nullable_String;

      --  whether the wiki is public.
      Is_Public : ADO.Nullable_Boolean;

      --  the last version.
      Version : ADO.Nullable_Integer;

      --  the number of times the page was displayed.
      Read_Count : ADO.Nullable_Integer;

      --  the wiki page creation date.
      Date : ADO.Nullable_Time;

      --  the wiki page format.
      Format : Nullable_Format_Type;

      --  the wiki page content.
      Content : ADO.Nullable_String;

      --  the wiki version comment.
      Save_Comment : ADO.Nullable_String;

      --  the wiki page left side panel.
      Left_Side : Ada.Strings.Unbounded.Unbounded_String;

      --  the wiki page right side panel.
      Right_Side : Ada.Strings.Unbounded.Unbounded_String;

      --  the wiki side format.
      Side_Format : Format_Type;

      --  the wiki page author.
      Author : ADO.Nullable_String;

      --  the acl Id if there is one.
      Acl_Id : ADO.Identifier;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_View_Info)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_View_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_View_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Wiki_View_Info;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   procedure Read (Into : in out Wiki_View_Info;
                   Stmt : in out ADO.Statements.Query_Statement'Class);

   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   procedure Load (Object  : in out Wiki_View_Info'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Wiki_Page : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Page_Id : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Page_Content : constant ADO.Queries.Query_Definition_Access;

   Query_Wiki_Page_Name_Count : constant ADO.Queries.Query_Definition_Access;


   type Wiki_Space_Bean is abstract new AWA.Wikis.Models.Wiki_Space_Ref
     and Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with null record;


   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Space_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;


   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Space_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Save (Bean : in out Wiki_Space_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Load (Bean : in out Wiki_Space_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   --  --------------------
   --    setup the page bean when the wiki page is created.
   --  --------------------
   type Wiki_Page_Bean is abstract new AWA.Wikis.Models.Wiki_Page_Ref
     and Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with null record;


   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;


   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Save (Bean : in out Wiki_Page_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Delete (Bean : in out Wiki_Page_Bean;
                    Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Load (Bean : in out Wiki_Page_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Setup (Bean : in out Wiki_Page_Bean;
                   Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   --  --------------------
   --    Load the list items
   --  --------------------
   type Wiki_Page_List_Bean is abstract limited
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the page number being displayed (for pagination)
      Page : Integer;

      --  The number of wiki pages
      Count : Integer;

      --  the number of items in the page
      Page_Size : Integer;

      --  the tag to filter the list
      Tag : Ada.Strings.Unbounded.Unbounded_String;

      --  the wiki identifier
      Wiki_Id : ADO.Identifier;

      --  the sort list mode.
      Sort : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Page_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Wiki_Page_List_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   type Wiki_Version_List_Bean is abstract limited
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the page number.
      Page : Integer;

      --  the number of versions.
      Count : Integer;

      --  the number of wiki version per display page.
      Page_Size : Integer;

      --  the wiki identifier.
      Wiki_Id : ADO.Identifier;

      --  the wiki page id.
      Page_Id : ADO.Identifier;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Version_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Version_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Version_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Wiki_Version_List_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   type Wiki_Page_Info_Bean is abstract limited
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the wiki identifier.
      Wiki_Id : ADO.Identifier;

      --  the wiki page identifier.
      Page_Id : ADO.Identifier;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_Info_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Wiki_Page_Info_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Info_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Wiki_Page_Info_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;


private
   WIKI_CONTENT_NAME : aliased constant String := "awa_wiki_content";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "create_date";
   COL_2_1_NAME : aliased constant String := "content";
   COL_3_1_NAME : aliased constant String := "format";
   COL_4_1_NAME : aliased constant String := "save_comment";
   COL_5_1_NAME : aliased constant String := "version";
   COL_6_1_NAME : aliased constant String := "page_version";
   COL_7_1_NAME : aliased constant String := "page_id";
   COL_8_1_NAME : aliased constant String := "author_id";

   WIKI_CONTENT_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count   => 9,
      Table   => WIKI_CONTENT_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access,
         6 => COL_5_1_NAME'Access,
         7 => COL_6_1_NAME'Access,
         8 => COL_7_1_NAME'Access,
         9 => COL_8_1_NAME'Access)
     );
   WIKI_CONTENT_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := WIKI_CONTENT_DEF'Access;


   Null_Wiki_Content : constant Wiki_Content_Ref
      := Wiki_Content_Ref'(ADO.Objects.Object_Ref with null record);

   type Wiki_Content_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => WIKI_CONTENT_DEF'Access)
   with record
       Create_Date : Ada.Calendar.Time;
       Content : Ada.Strings.Unbounded.Unbounded_String;
       Format : Format_Type;
       Save_Comment : Ada.Strings.Unbounded.Unbounded_String;
       Version : Integer;
       Page_Version : Integer;
       Page_Id : ADO.Identifier;
       Author : AWA.Users.Models.User_Ref;
   end record;

   type Wiki_Content_Access is access all Wiki_Content_Impl;

   overriding
   procedure Destroy (Object : access Wiki_Content_Impl);

   overriding
   procedure Find (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Wiki_Content_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Create (Object  : in out Wiki_Content_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Wiki_Content_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Wiki_Content_Ref'Class;
                        Impl   : out Wiki_Content_Access);
   WIKI_SPACE_NAME : aliased constant String := "awa_wiki_space";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "name";
   COL_2_2_NAME : aliased constant String := "is_public";
   COL_3_2_NAME : aliased constant String := "version";
   COL_4_2_NAME : aliased constant String := "create_date";
   COL_5_2_NAME : aliased constant String := "left_side";
   COL_6_2_NAME : aliased constant String := "right_side";
   COL_7_2_NAME : aliased constant String := "format";
   COL_8_2_NAME : aliased constant String := "workspace_id";

   WIKI_SPACE_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count   => 9,
      Table   => WIKI_SPACE_NAME'Access,
      Members => (
         1 => COL_0_2_NAME'Access,
         2 => COL_1_2_NAME'Access,
         3 => COL_2_2_NAME'Access,
         4 => COL_3_2_NAME'Access,
         5 => COL_4_2_NAME'Access,
         6 => COL_5_2_NAME'Access,
         7 => COL_6_2_NAME'Access,
         8 => COL_7_2_NAME'Access,
         9 => COL_8_2_NAME'Access)
     );
   WIKI_SPACE_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := WIKI_SPACE_DEF'Access;

   WIKI_SPACE_AUDIT_DEF : aliased constant ADO.Audits.Auditable_Mapping :=
     (Count    => 3,
      Of_Class => WIKI_SPACE_DEF'Access,
      Members  => (
         1 => 1,
         2 => 2,
         3 => 7)
     );
   WIKI_SPACE_AUDIT_TABLE : constant ADO.Audits.Auditable_Mapping_Access
      := WIKI_SPACE_AUDIT_DEF'Access;

   Null_Wiki_Space : constant Wiki_Space_Ref
      := Wiki_Space_Ref'(ADO.Objects.Object_Ref with null record);

   type Wiki_Space_Impl is
      new ADO.Audits.Auditable_Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => WIKI_SPACE_DEF'Access,
                                     With_Audit => WIKI_SPACE_AUDIT_DEF'Access)
   with record
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Is_Public : Boolean;
       Version : Integer;
       Create_Date : Ada.Calendar.Time;
       Left_Side : Ada.Strings.Unbounded.Unbounded_String;
       Right_Side : Ada.Strings.Unbounded.Unbounded_String;
       Format : Format_Type;
       Workspace : AWA.Workspaces.Models.Workspace_Ref;
   end record;

   type Wiki_Space_Access is access all Wiki_Space_Impl;

   overriding
   procedure Destroy (Object : access Wiki_Space_Impl);

   overriding
   procedure Find (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Wiki_Space_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Create (Object  : in out Wiki_Space_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Wiki_Space_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Wiki_Space_Ref'Class;
                        Impl   : out Wiki_Space_Access);
   WIKI_PAGE_NAME : aliased constant String := "awa_wiki_page";
   COL_0_3_NAME : aliased constant String := "id";
   COL_1_3_NAME : aliased constant String := "name";
   COL_2_3_NAME : aliased constant String := "last_version";
   COL_3_3_NAME : aliased constant String := "is_public";
   COL_4_3_NAME : aliased constant String := "title";
   COL_5_3_NAME : aliased constant String := "version";
   COL_6_3_NAME : aliased constant String := "read_count";
   COL_7_3_NAME : aliased constant String := "preview_id";
   COL_8_3_NAME : aliased constant String := "wiki_id";
   COL_9_3_NAME : aliased constant String := "content_id";

   WIKI_PAGE_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count   => 10,
      Table   => WIKI_PAGE_NAME'Access,
      Members => (
         1 => COL_0_3_NAME'Access,
         2 => COL_1_3_NAME'Access,
         3 => COL_2_3_NAME'Access,
         4 => COL_3_3_NAME'Access,
         5 => COL_4_3_NAME'Access,
         6 => COL_5_3_NAME'Access,
         7 => COL_6_3_NAME'Access,
         8 => COL_7_3_NAME'Access,
         9 => COL_8_3_NAME'Access,
         10 => COL_9_3_NAME'Access)
     );
   WIKI_PAGE_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := WIKI_PAGE_DEF'Access;

   WIKI_PAGE_AUDIT_DEF : aliased constant ADO.Audits.Auditable_Mapping :=
     (Count    => 4,
      Of_Class => WIKI_PAGE_DEF'Access,
      Members  => (
         1 => 1,
         2 => 2,
         3 => 3,
         4 => 4)
     );
   WIKI_PAGE_AUDIT_TABLE : constant ADO.Audits.Auditable_Mapping_Access
      := WIKI_PAGE_AUDIT_DEF'Access;

   Null_Wiki_Page : constant Wiki_Page_Ref
      := Wiki_Page_Ref'(ADO.Objects.Object_Ref with null record);

   type Wiki_Page_Impl is
      new ADO.Audits.Auditable_Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => WIKI_PAGE_DEF'Access,
                                     With_Audit => WIKI_PAGE_AUDIT_DEF'Access)
   with record
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Last_Version : Integer;
       Is_Public : Boolean;
       Title : Ada.Strings.Unbounded.Unbounded_String;
       Version : Integer;
       Read_Count : Integer;
       Preview : AWA.Images.Models.Image_Ref;
       Wiki : Wiki_Space_Ref;
       Content : Wiki_Content_Ref;
   end record;

   type Wiki_Page_Access is access all Wiki_Page_Impl;

   overriding
   procedure Destroy (Object : access Wiki_Page_Impl);

   overriding
   procedure Find (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Wiki_Page_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Create (Object  : in out Wiki_Page_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Wiki_Page_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Wiki_Page_Ref'Class;
                        Impl   : out Wiki_Page_Access);

   package File_1 is
      new ADO.Queries.Loaders.File (Path => "wiki-stat.xml",
                                    Sha1 => "9B2B599473F75F92CB5AB5045675E4CCEF926543");

   package Def_Page_Access_Stats is
      new ADO.Queries.Loaders.Query (Name => "page-access-stats",
                                     File => File_1.File'Access);
   Query_Page_Access_Stats : constant ADO.Queries.Query_Definition_Access
   := Def_Page_Access_Stats.Query'Access;

   package File_2 is
      new ADO.Queries.Loaders.File (Path => "wiki-images-info.xml",
                                    Sha1 => "D7213D2A931D1393B673EF8B6028E5B6D36D2C22");

   package Def_Wikiimagebean_Wiki_Image is
      new ADO.Queries.Loaders.Query (Name => "wiki-image",
                                     File => File_2.File'Access);
   Query_Wiki_Image : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiimagebean_Wiki_Image.Query'Access;

   package File_3 is
      new ADO.Queries.Loaders.File (Path => "wiki-images.xml",
                                    Sha1 => "4282148DEBAB32E79BAC617BA9932D330B5FAFCC");

   package Def_Wikiimageinfo_Wiki_Image_Get_Data is
      new ADO.Queries.Loaders.Query (Name => "wiki-image-get-data",
                                     File => File_3.File'Access);
   Query_Wiki_Image_Get_Data : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiimageinfo_Wiki_Image_Get_Data.Query'Access;

   package Def_Wikiimageinfo_Wiki_Image_Width_Get_Data is
      new ADO.Queries.Loaders.Query (Name => "wiki-image-width-get-data",
                                     File => File_3.File'Access);
   Query_Wiki_Image_Width_Get_Data : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiimageinfo_Wiki_Image_Width_Get_Data.Query'Access;

   package Def_Wikiimageinfo_Wiki_Image_Height_Get_Data is
      new ADO.Queries.Loaders.Query (Name => "wiki-image-height-get-data",
                                     File => File_3.File'Access);
   Query_Wiki_Image_Height_Get_Data : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiimageinfo_Wiki_Image_Height_Get_Data.Query'Access;

   package File_4 is
      new ADO.Queries.Loaders.File (Path => "wiki-list.xml",
                                    Sha1 => "134AA901EAD20B164194D37CC198D8B6092FF0DF");

   package Def_Wikiinfo_Wiki_List is
      new ADO.Queries.Loaders.Query (Name => "wiki-list",
                                     File => File_4.File'Access);
   Query_Wiki_List : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiinfo_Wiki_List.Query'Access;

   package File_5 is
      new ADO.Queries.Loaders.File (Path => "wiki-pages.xml",
                                    Sha1 => "3D026597D06A525412B37B034831E5ABC1F9EFA5");

   package Def_Wikipageinfo_Wiki_Page_List is
      new ADO.Queries.Loaders.Query (Name => "wiki-page-list",
                                     File => File_5.File'Access);
   Query_Wiki_Page_List : constant ADO.Queries.Query_Definition_Access
   := Def_Wikipageinfo_Wiki_Page_List.Query'Access;

   package Def_Wikipageinfo_Wiki_Page_Tag_List is
      new ADO.Queries.Loaders.Query (Name => "wiki-page-tag-list",
                                     File => File_5.File'Access);
   Query_Wiki_Page_Tag_List : constant ADO.Queries.Query_Definition_Access
   := Def_Wikipageinfo_Wiki_Page_Tag_List.Query'Access;

   package File_6 is
      new ADO.Queries.Loaders.File (Path => "wiki-history.xml",
                                    Sha1 => "AC42BF3C04729AEE8ADED975B16EBB859D1E7276");

   package Def_Wikiversioninfo_Wiki_Version_List is
      new ADO.Queries.Loaders.Query (Name => "wiki-version-list",
                                     File => File_6.File'Access);
   Query_Wiki_Version_List : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiversioninfo_Wiki_Version_List.Query'Access;

   package File_7 is
      new ADO.Queries.Loaders.File (Path => "wiki-page.xml",
                                    Sha1 => "22207D56B65DA5B8AD7DA81FDADE5742133A8770");

   package Def_Wikiviewinfo_Wiki_Page is
      new ADO.Queries.Loaders.Query (Name => "wiki-page",
                                     File => File_7.File'Access);
   Query_Wiki_Page : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiviewinfo_Wiki_Page.Query'Access;

   package Def_Wikiviewinfo_Wiki_Page_Id is
      new ADO.Queries.Loaders.Query (Name => "wiki-page-id",
                                     File => File_7.File'Access);
   Query_Wiki_Page_Id : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiviewinfo_Wiki_Page_Id.Query'Access;

   package Def_Wikiviewinfo_Wiki_Page_Content is
      new ADO.Queries.Loaders.Query (Name => "wiki-page-content",
                                     File => File_7.File'Access);
   Query_Wiki_Page_Content : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiviewinfo_Wiki_Page_Content.Query'Access;

   package Def_Wikiviewinfo_Wiki_Page_Name_Count is
      new ADO.Queries.Loaders.Query (Name => "wiki-page-name-count",
                                     File => File_7.File'Access);
   Query_Wiki_Page_Name_Count : constant ADO.Queries.Query_Definition_Access
   := Def_Wikiviewinfo_Wiki_Page_Name_Count.Query'Access;
end AWA.Wikis.Models;
