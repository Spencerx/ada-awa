-----------------------------------------------------------------------
--  AWA.Wikis.Models -- AWA.Wikis.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
pragma Warnings (On);
package body AWA.Wikis.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Wiki_Content_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_CONTENT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Content_Key;

   function Wiki_Content_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_CONTENT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Content_Key;

   function "=" (Left, Right : Wiki_Content_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Wiki_Content_Ref'Class;
                        Impl   : out Wiki_Content_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Wiki_Content_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Content_Ref) is
      Impl : Wiki_Content_Access;
   begin
      Impl := new Wiki_Content_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Format := Format_Type'First;
      Impl.Version := 0;
      Impl.Page_Version := 0;
      Impl.Page_Id := ADO.NO_IDENTIFIER;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Wiki_Content
   -- ----------------------------------------

   procedure Set_Id (Object : in out Wiki_Content_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Wiki_Content_Ref)
                  return ADO.Identifier is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Create_Date (Object : in out Wiki_Content_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Wiki_Content_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Content (Object : in out Wiki_Content_Ref;
                           Value : in String) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Content, Value);
   end Set_Content;

   procedure Set_Content (Object : in out Wiki_Content_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Content, Value);
   end Set_Content;

   function Get_Content (Object : in Wiki_Content_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Content);
   end Get_Content;
   function Get_Content (Object : in Wiki_Content_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Content;
   end Get_Content;


   procedure Set_Format (Object : in out Wiki_Content_Ref;
                         Value  : in Format_Type) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (Format_Type);
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 4, Impl.Format, Value);
   end Set_Format;

   function Get_Format (Object : in Wiki_Content_Ref)
                  return Format_Type is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Format;
   end Get_Format;


   procedure Set_Save_Comment (Object : in out Wiki_Content_Ref;
                                Value : in String) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Save_Comment, Value);
   end Set_Save_Comment;

   procedure Set_Save_Comment (Object : in out Wiki_Content_Ref;
                               Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Save_Comment, Value);
   end Set_Save_Comment;

   function Get_Save_Comment (Object : in Wiki_Content_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Save_Comment);
   end Get_Save_Comment;
   function Get_Save_Comment (Object : in Wiki_Content_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Save_Comment;
   end Get_Save_Comment;


   function Get_Version (Object : in Wiki_Content_Ref)
                  return Integer is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Page_Version (Object : in out Wiki_Content_Ref;
                               Value  : in Integer) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 7, Impl.Page_Version, Value);
   end Set_Page_Version;

   function Get_Page_Version (Object : in Wiki_Content_Ref)
                  return Integer is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Page_Version;
   end Get_Page_Version;


   procedure Set_Page_Id (Object : in out Wiki_Content_Ref;
                          Value  : in ADO.Identifier) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 8, Impl.Page_Id, Value);
   end Set_Page_Id;

   function Get_Page_Id (Object : in Wiki_Content_Ref)
                  return ADO.Identifier is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Page_Id;
   end Get_Page_Id;


   procedure Set_Author (Object : in out Wiki_Content_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Wiki_Content_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.Author, Value);
   end Set_Author;

   function Get_Author (Object : in Wiki_Content_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Wiki_Content_Access
         := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Author;
   end Get_Author;

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Content_Ref;
                   Into   : in out Wiki_Content_Ref) is
      Result : Wiki_Content_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Wiki_Content_Access
              := Wiki_Content_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Wiki_Content_Access
              := new Wiki_Content_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Content := Impl.Content;
            Copy.Format := Impl.Format;
            Copy.Save_Comment := Impl.Save_Comment;
            Copy.Version := Impl.Version;
            Copy.Page_Version := Impl.Page_Version;
            Copy.Page_Id := Impl.Page_Id;
            Copy.Author := Impl.Author;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Content_Access := new Wiki_Content_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Wiki_Content_Access := new Wiki_Content_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Content_Access := new Wiki_Content_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Wiki_Content_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Wiki_Content_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Wiki_Content_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, WIKI_CONTENT_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Wiki_Content_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Wiki_Content_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Wiki_Content_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Wiki_Content_Impl) is
      type Wiki_Content_Impl_Ptr is access all Wiki_Content_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Wiki_Content_Impl, Wiki_Content_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Wiki_Content_Impl_Ptr := Wiki_Content_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, WIKI_CONTENT_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Wiki_Content_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (WIKI_CONTENT_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  page_version
                          Value => Object.Page_Version);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  page_id
                          Value => Object.Page_Id);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_1_NAME, --  author_id
                          Value => Object.Author);
         Object.Clear_Modified (9);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Wiki_Content_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (WIKI_CONTENT_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_2_1_NAME, --  content
                        Value => Object.Content);
      Query.Save_Field (Name  => COL_3_1_NAME, --  format
                        Value => Integer (Format_Type'Enum_Rep (Object.Format)));
      Query.Save_Field (Name  => COL_4_1_NAME, --  save_comment
                        Value => Object.Save_Comment);
      Query.Save_Field (Name  => COL_5_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_6_1_NAME, --  page_version
                        Value => Object.Page_Version);
      Query.Save_Field (Name  => COL_7_1_NAME, --  page_id
                        Value => Object.Page_Id);
      Query.Save_Field (Name  => COL_8_1_NAME, --  author_id
                        Value => Object.Author);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Wiki_Content_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (WIKI_CONTENT_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Content_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Wiki_Content_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Wiki_Content_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "content" then
         return Util.Beans.Objects.To_Object (Impl.Content);
      elsif Name = "format" then
         return Format_Type_Objects.To_Object (Impl.Format);
      elsif Name = "save_comment" then
         return Util.Beans.Objects.To_Object (Impl.Save_Comment);
      elsif Name = "page_version" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Page_Version));
      elsif Name = "page_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Page_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Wiki_Content_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (1);
      Object.Content := Stmt.Get_Unbounded_String (2);
      Object.Format := Format_Type'Enum_Val (Stmt.Get_Integer (3));
      Object.Save_Comment := Stmt.Get_Unbounded_String (4);
      Object.Page_Version := Stmt.Get_Integer (6);
      Object.Page_Id := Stmt.Get_Identifier (7);
      if not Stmt.Is_Null (8) then
         Object.Author.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      Object.Version := Stmt.Get_Integer (5);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Wiki_Space_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_SPACE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Space_Key;

   function Wiki_Space_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_SPACE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Space_Key;

   function "=" (Left, Right : Wiki_Space_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Wiki_Space_Ref'Class;
                        Impl   : out Wiki_Space_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Wiki_Space_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Space_Ref) is
      Impl : Wiki_Space_Access;
   begin
      Impl := new Wiki_Space_Impl;
      Impl.Is_Public := False;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Format := Format_Type'First;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Wiki_Space
   -- ----------------------------------------

   procedure Set_Id (Object : in out Wiki_Space_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Wiki_Space_Ref)
                  return ADO.Identifier is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Wiki_Space_Ref;
                        Value : in String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Wiki_Space_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Wiki_Space_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Wiki_Space_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Is_Public (Object : in out Wiki_Space_Ref;
                            Value  : in Boolean) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Boolean (Impl.all, 3, Impl.Is_Public, Value);
   end Set_Is_Public;

   function Get_Is_Public (Object : in Wiki_Space_Ref)
                  return Boolean is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Is_Public;
   end Get_Is_Public;


   function Get_Version (Object : in Wiki_Space_Ref)
                  return Integer is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Create_Date (Object : in out Wiki_Space_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 5, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Wiki_Space_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Left_Side (Object : in out Wiki_Space_Ref;
                             Value : in String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 6, Impl.Left_Side, Value);
   end Set_Left_Side;

   procedure Set_Left_Side (Object : in out Wiki_Space_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 6, Impl.Left_Side, Value);
   end Set_Left_Side;

   function Get_Left_Side (Object : in Wiki_Space_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Left_Side);
   end Get_Left_Side;
   function Get_Left_Side (Object : in Wiki_Space_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Left_Side;
   end Get_Left_Side;


   procedure Set_Right_Side (Object : in out Wiki_Space_Ref;
                              Value : in String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 7, Impl.Right_Side, Value);
   end Set_Right_Side;

   procedure Set_Right_Side (Object : in out Wiki_Space_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 7, Impl.Right_Side, Value);
   end Set_Right_Side;

   function Get_Right_Side (Object : in Wiki_Space_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Right_Side);
   end Get_Right_Side;
   function Get_Right_Side (Object : in Wiki_Space_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Right_Side;
   end Get_Right_Side;


   procedure Set_Format (Object : in out Wiki_Space_Ref;
                         Value  : in Format_Type) is
      procedure Set_Field_Discrete is
        new ADO.Audits.Set_Field_Operation
          (Format_Type,
           Format_Type_Objects.To_Object);
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 8, Impl.Format, Value);
   end Set_Format;

   function Get_Format (Object : in Wiki_Space_Ref)
                  return Format_Type is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Format;
   end Get_Format;


   procedure Set_Workspace (Object : in out Wiki_Space_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Wiki_Space_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Wiki_Space_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Wiki_Space_Access
         := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Space_Ref;
                   Into   : in out Wiki_Space_Ref) is
      Result : Wiki_Space_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Wiki_Space_Access
              := Wiki_Space_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Wiki_Space_Access
              := new Wiki_Space_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Is_Public := Impl.Is_Public;
            Copy.Version := Impl.Version;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Left_Side := Impl.Left_Side;
            Copy.Right_Side := Impl.Right_Side;
            Copy.Format := Impl.Format;
            Copy.Workspace := Impl.Workspace;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Space_Access := new Wiki_Space_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Wiki_Space_Access := new Wiki_Space_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Space_Access := new Wiki_Space_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Wiki_Space_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Wiki_Space_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Wiki_Space_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, WIKI_SPACE_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Wiki_Space_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Wiki_Space_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Wiki_Space_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Wiki_Space_Impl) is
      type Wiki_Space_Impl_Ptr is access all Wiki_Space_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Wiki_Space_Impl, Wiki_Space_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Wiki_Space_Impl_Ptr := Wiki_Space_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, WIKI_SPACE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Wiki_Space_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (WIKI_SPACE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  is_public
                          Value => Object.Is_Public);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  left_side
                          Value => Object.Left_Side);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  right_side
                          Value => Object.Right_Side);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  format
                          Value => Integer (Format_Type'Enum_Rep (Object.Format)));
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_2_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (9);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
            ADO.Audits.Save (Object, Session);
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Wiki_Space_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (WIKI_SPACE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_2_NAME, --  is_public
                        Value => Object.Is_Public);
      Query.Save_Field (Name  => COL_3_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_4_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_5_2_NAME, --  left_side
                        Value => Object.Left_Side);
      Query.Save_Field (Name  => COL_6_2_NAME, --  right_side
                        Value => Object.Right_Side);
      Query.Save_Field (Name  => COL_7_2_NAME, --  format
                        Value => Integer (Format_Type'Enum_Rep (Object.Format)));
      Query.Save_Field (Name  => COL_8_2_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
      ADO.Audits.Save (Object, Session);
   end Create;

   overriding
   procedure Delete (Object  : in out Wiki_Space_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (WIKI_SPACE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Space_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Wiki_Space_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Wiki_Space_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (Impl.Is_Public);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "left_side" then
         return Util.Beans.Objects.To_Object (Impl.Left_Side);
      elsif Name = "right_side" then
         return Util.Beans.Objects.To_Object (Impl.Right_Side);
      elsif Name = "format" then
         return Format_Type_Objects.To_Object (Impl.Format);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Wiki_Space_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Is_Public := Stmt.Get_Boolean (2);
      Object.Create_Date := Stmt.Get_Time (4);
      Object.Left_Side := Stmt.Get_Unbounded_String (5);
      Object.Right_Side := Stmt.Get_Unbounded_String (6);
      Object.Format := Format_Type'Enum_Val (Stmt.Get_Integer (7));
      if not Stmt.Is_Null (8) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      Object.Version := Stmt.Get_Integer (3);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Wiki_Page_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_PAGE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Page_Key;

   function Wiki_Page_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => WIKI_PAGE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Wiki_Page_Key;

   function "=" (Left, Right : Wiki_Page_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Wiki_Page_Ref'Class;
                        Impl   : out Wiki_Page_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Wiki_Page_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Wiki_Page_Ref) is
      Impl : Wiki_Page_Access;
   begin
      Impl := new Wiki_Page_Impl;
      Impl.Last_Version := 0;
      Impl.Is_Public := False;
      Impl.Version := 0;
      Impl.Read_Count := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Wiki_Page
   -- ----------------------------------------

   procedure Set_Id (Object : in out Wiki_Page_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Wiki_Page_Ref)
                  return ADO.Identifier is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Wiki_Page_Ref;
                        Value : in String) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Wiki_Page_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Wiki_Page_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Wiki_Page_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Last_Version (Object : in out Wiki_Page_Ref;
                               Value  : in Integer) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Integer (Impl.all, 3, Impl.Last_Version, Value);
   end Set_Last_Version;

   function Get_Last_Version (Object : in Wiki_Page_Ref)
                  return Integer is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Version;
   end Get_Last_Version;


   procedure Set_Is_Public (Object : in out Wiki_Page_Ref;
                            Value  : in Boolean) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Boolean (Impl.all, 4, Impl.Is_Public, Value);
   end Set_Is_Public;

   function Get_Is_Public (Object : in Wiki_Page_Ref)
                  return Boolean is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Is_Public;
   end Get_Is_Public;


   procedure Set_Title (Object : in out Wiki_Page_Ref;
                         Value : in String) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 5, Impl.Title, Value);
   end Set_Title;

   procedure Set_Title (Object : in out Wiki_Page_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 5, Impl.Title, Value);
   end Set_Title;

   function Get_Title (Object : in Wiki_Page_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Title);
   end Get_Title;
   function Get_Title (Object : in Wiki_Page_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Title;
   end Get_Title;


   function Get_Version (Object : in Wiki_Page_Ref)
                  return Integer is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Read_Count (Object : in out Wiki_Page_Ref;
                             Value  : in Integer) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 7, Impl.Read_Count, Value);
   end Set_Read_Count;

   function Get_Read_Count (Object : in Wiki_Page_Ref)
                  return Integer is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Read_Count;
   end Get_Read_Count;


   procedure Set_Preview (Object : in out Wiki_Page_Ref;
                          Value  : in AWA.Images.Models.Image_Ref'Class) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Preview, Value);
   end Set_Preview;

   function Get_Preview (Object : in Wiki_Page_Ref)
                  return AWA.Images.Models.Image_Ref'Class is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Preview;
   end Get_Preview;


   procedure Set_Wiki (Object : in out Wiki_Page_Ref;
                       Value  : in Wiki_Space_Ref'Class) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.Wiki, Value);
   end Set_Wiki;

   function Get_Wiki (Object : in Wiki_Page_Ref)
                  return Wiki_Space_Ref'Class is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Wiki;
   end Get_Wiki;


   procedure Set_Content (Object : in out Wiki_Page_Ref;
                          Value  : in Wiki_Content_Ref'Class) is
      Impl : Wiki_Page_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.Content, Value);
   end Set_Content;

   function Get_Content (Object : in Wiki_Page_Ref)
                  return Wiki_Content_Ref'Class is
      Impl : constant Wiki_Page_Access
         := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Content;
   end Get_Content;

   --  Copy of the object.
   procedure Copy (Object : in Wiki_Page_Ref;
                   Into   : in out Wiki_Page_Ref) is
      Result : Wiki_Page_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Wiki_Page_Access
              := Wiki_Page_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Wiki_Page_Access
              := new Wiki_Page_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Last_Version := Impl.Last_Version;
            Copy.Is_Public := Impl.Is_Public;
            Copy.Title := Impl.Title;
            Copy.Version := Impl.Version;
            Copy.Read_Count := Impl.Read_Count;
            Copy.Preview := Impl.Preview;
            Copy.Wiki := Impl.Wiki;
            Copy.Content := Impl.Content;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Page_Access := new Wiki_Page_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Wiki_Page_Access := new Wiki_Page_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Wiki_Page_Access := new Wiki_Page_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Wiki_Page_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Wiki_Page_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Wiki_Page_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, WIKI_PAGE_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Wiki_Page_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Wiki_Page_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Wiki_Page_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Wiki_Page_Impl) is
      type Wiki_Page_Impl_Ptr is access all Wiki_Page_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Wiki_Page_Impl, Wiki_Page_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Wiki_Page_Impl_Ptr := Wiki_Page_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, WIKI_PAGE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Wiki_Page_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (WIKI_PAGE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  last_version
                          Value => Object.Last_Version);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_3_NAME, --  is_public
                          Value => Object.Is_Public);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_3_NAME, --  title
                          Value => Object.Title);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_3_NAME, --  read_count
                          Value => Object.Read_Count);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_3_NAME, --  preview_id
                          Value => Object.Preview);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_3_NAME, --  wiki_id
                          Value => Object.Wiki);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_3_NAME, --  content_id
                          Value => Object.Content);
         Object.Clear_Modified (10);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
            ADO.Audits.Save (Object, Session);
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Wiki_Page_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (WIKI_PAGE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_3_NAME, --  last_version
                        Value => Object.Last_Version);
      Query.Save_Field (Name  => COL_3_3_NAME, --  is_public
                        Value => Object.Is_Public);
      Query.Save_Field (Name  => COL_4_3_NAME, --  title
                        Value => Object.Title);
      Query.Save_Field (Name  => COL_5_3_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_6_3_NAME, --  read_count
                        Value => Object.Read_Count);
      Query.Save_Field (Name  => COL_7_3_NAME, --  preview_id
                        Value => Object.Preview);
      Query.Save_Field (Name  => COL_8_3_NAME, --  wiki_id
                        Value => Object.Wiki);
      Query.Save_Field (Name  => COL_9_3_NAME, --  content_id
                        Value => Object.Content);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
      ADO.Audits.Save (Object, Session);
   end Create;

   overriding
   procedure Delete (Object  : in out Wiki_Page_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (WIKI_PAGE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Page_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Wiki_Page_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Wiki_Page_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "last_version" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Last_Version));
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (Impl.Is_Public);
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (Impl.Title);
      elsif Name = "read_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Read_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Wiki_Page_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Last_Version := Stmt.Get_Integer (2);
      Object.Is_Public := Stmt.Get_Boolean (3);
      Object.Title := Stmt.Get_Unbounded_String (4);
      Object.Read_Count := Stmt.Get_Integer (6);
      if not Stmt.Is_Null (7) then
         Object.Preview.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      if not Stmt.Is_Null (8) then
         Object.Wiki.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      if not Stmt.Is_Null (9) then
         Object.Content.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      Object.Version := Stmt.Get_Integer (5);
      ADO.Objects.Set_Created (Object);
   end Load;
   procedure Op_Load (Bean    : in out Wiki_Image_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Image_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Image_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Image_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Image_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_Image_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Image_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Image_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Image_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Image_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "folder_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Folder_Id));
      elsif Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "create_date" then
         if From.Create_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Create_Date.Value);
         end if;
      elsif Name = "uri" then
         if From.Uri.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Uri.Value);
         end if;
      elsif Name = "storage" then
         return AWA.Storages.Models.Storage_Type_Objects.To_Object (From.Storage);
      elsif Name = "mime_type" then
         if From.Mime_Type.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Mime_Type.Value);
         end if;
      elsif Name = "file_size" then
         if From.File_Size.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.File_Size.Value));
         end if;
      elsif Name = "width" then
         if From.Width.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Width.Value));
         end if;
      elsif Name = "height" then
         if From.Height.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Height.Value));
         end if;
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Image_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "folder_id" then
         Item.Folder_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "create_date" then
         Item.Create_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Create_Date.Is_Null then
            Item.Create_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "uri" then
         Item.Uri.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Uri.Is_Null then
            Item.Uri.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "storage" then
         Item.Storage := AWA.Storages.Models.Storage_Type_Objects.To_Value (Value);
      elsif Name = "mime_type" then
         Item.Mime_Type.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Mime_Type.Is_Null then
            Item.Mime_Type.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "file_size" then
         Item.File_Size.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.File_Size.Is_Null then
            Item.File_Size.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "width" then
         Item.Width.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Width.Is_Null then
            Item.Width.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "height" then
         Item.Height.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Height.Is_Null then
            Item.Height.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      end if;
   end Set_Value;


   --  --------------------
   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   --  --------------------
   procedure Read (Into : in out Wiki_Image_Bean;
                   Stmt : in out ADO.Statements.Query_Statement'Class) is
   begin
      if not Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
      Into.Folder_Id := Stmt.Get_Identifier (0);
      Into.Id := Stmt.Get_Identifier (1);
      Into.Create_Date := Stmt.Get_Nullable_Time (2);
      Into.Uri := Stmt.Get_Nullable_String (3);
      Into.Storage := AWA.Storages.Models.Storage_Type'Enum_Val (Stmt.Get_Integer (4));
      Into.Mime_Type := Stmt.Get_Nullable_String (5);
      Into.File_Size := Stmt.Get_Nullable_Integer (6);
      Into.Width := Stmt.Get_Nullable_Integer (7);
      Into.Height := Stmt.Get_Nullable_Integer (8);
      Stmt.Next;
   end Read;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   --  --------------------
   procedure Load (Object  : in out Wiki_Image_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (Context);
   begin
      Stmt.Execute;
      Read (Object, Stmt);
      if Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Image_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "folder_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Folder_Id));
      elsif Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "create_date" then
         if From.Create_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Create_Date.Value);
         end if;
      elsif Name = "uri" then
         if From.Uri.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Uri.Value);
         end if;
      elsif Name = "storage" then
         return AWA.Storages.Models.Storage_Type_Objects.To_Object (From.Storage);
      elsif Name = "mime_type" then
         if From.Mime_Type.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Mime_Type.Value);
         end if;
      elsif Name = "file_size" then
         if From.File_Size.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.File_Size.Value));
         end if;
      elsif Name = "width" then
         if From.Width.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Width.Value));
         end if;
      elsif Name = "height" then
         if From.Height.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Height.Value));
         end if;
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Image_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "folder_id" then
         Item.Folder_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "create_date" then
         Item.Create_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Create_Date.Is_Null then
            Item.Create_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "uri" then
         Item.Uri.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Uri.Is_Null then
            Item.Uri.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "storage" then
         Item.Storage := AWA.Storages.Models.Storage_Type_Objects.To_Value (Value);
      elsif Name = "mime_type" then
         Item.Mime_Type.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Mime_Type.Is_Null then
            Item.Mime_Type.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "file_size" then
         Item.File_Size.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.File_Size.Is_Null then
            Item.File_Size.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "width" then
         Item.Width.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Width.Is_Null then
            Item.Width.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "height" then
         Item.Height.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Height.Is_Null then
            Item.Height.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Wiki_Image_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The information about an image used in a wiki page.
   --  --------------------
   procedure List (Object  : in out Wiki_Image_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Wiki_Image_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Wiki_Image_Info) is
      begin
         Into.Folder_Id := Stmt.Get_Identifier (0);
         Into.Id := Stmt.Get_Identifier (1);
         Into.Create_Date := Stmt.Get_Nullable_Time (2);
         Into.Uri := Stmt.Get_Nullable_String (3);
         Into.Storage := AWA.Storages.Models.Storage_Type'Enum_Val (Stmt.Get_Integer (4));
         Into.Mime_Type := Stmt.Get_Nullable_String (5);
         Into.File_Size := Stmt.Get_Nullable_Integer (6);
         Into.Width := Stmt.Get_Nullable_Integer (7);
         Into.Height := Stmt.Get_Nullable_Integer (8);
      end Read;
   begin
      Stmt.Execute;
      Wiki_Image_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (From.Is_Public);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "page_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "is_public" then
         Item.Is_Public := Util.Beans.Objects.To_Boolean (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "page_count" then
         Item.Page_Count := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Wiki_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of wikis.
   --  --------------------
   procedure List (Object  : in out Wiki_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Wiki_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Wiki_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Name := Stmt.Get_Unbounded_String (1);
         Into.Is_Public := Stmt.Get_Boolean (2);
         Into.Create_Date := Stmt.Get_Time (3);
         Into.Page_Count := Stmt.Get_Integer (4);
      end Read;
   begin
      Stmt.Execute;
      Wiki_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Page_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (From.Is_Public);
      elsif Name = "last_version" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Last_Version));
      elsif Name = "read_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Read_Count));
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "author" then
         return Util.Beans.Objects.To_Object (From.Author);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "title" then
         Item.Title := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "is_public" then
         Item.Is_Public := Util.Beans.Objects.To_Boolean (Value);
      elsif Name = "last_version" then
         Item.Last_Version := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "read_count" then
         Item.Read_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "author" then
         Item.Author := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Wiki_Page_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The information about a wiki page.
   --  --------------------
   procedure List (Object  : in out Wiki_Page_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Wiki_Page_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Wiki_Page_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Name := Stmt.Get_Unbounded_String (1);
         Into.Title := Stmt.Get_Unbounded_String (2);
         Into.Is_Public := Stmt.Get_Boolean (3);
         Into.Last_Version := Stmt.Get_Integer (4);
         Into.Read_Count := Stmt.Get_Integer (5);
         Into.Create_Date := Stmt.Get_Time (6);
         Into.Author := Stmt.Get_Unbounded_String (7);
      end Read;
   begin
      Stmt.Execute;
      Wiki_Page_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Version_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "comment" then
         return Util.Beans.Objects.To_Object (From.Comment);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "page_version" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Version));
      elsif Name = "author" then
         return Util.Beans.Objects.To_Object (From.Author);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Version_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "comment" then
         Item.Comment := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "page_version" then
         Item.Page_Version := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "author" then
         Item.Author := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Wiki_Version_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The information about a wiki page version.
   --  --------------------
   procedure List (Object  : in out Wiki_Version_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Wiki_Version_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Wiki_Version_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Comment := Stmt.Get_Unbounded_String (1);
         Into.Create_Date := Stmt.Get_Time (2);
         Into.Page_Version := Stmt.Get_Integer (3);
         Into.Author := Stmt.Get_Unbounded_String (4);
      end Read;
   begin
      Stmt.Execute;
      Wiki_Version_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;

   procedure Op_Load (Bean    : in out Wiki_View_Info;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_View_Info;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_View_Info'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_View_Info_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_View_Info,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_View_Info_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_View_Info_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_View_Info)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_View_Info_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_View_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         if From.Name.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Name.Value);
         end if;
      elsif Name = "title" then
         if From.Title.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Title.Value);
         end if;
      elsif Name = "is_public" then
         if From.Is_Public.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Is_Public.Value);
         end if;
      elsif Name = "version" then
         if From.Version.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Version.Value));
         end if;
      elsif Name = "read_count" then
         if From.Read_Count.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Read_Count.Value));
         end if;
      elsif Name = "date" then
         if From.Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Date.Value);
         end if;
      elsif Name = "format" then
         if From.Format.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Format_Type_Objects.To_Object (From.Format.Value);
         end if;
      elsif Name = "content" then
         if From.Content.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Content.Value);
         end if;
      elsif Name = "save_comment" then
         if From.Save_Comment.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Save_Comment.Value);
         end if;
      elsif Name = "left_side" then
         return Util.Beans.Objects.To_Object (From.Left_Side);
      elsif Name = "right_side" then
         return Util.Beans.Objects.To_Object (From.Right_Side);
      elsif Name = "side_format" then
         return Format_Type_Objects.To_Object (From.Side_Format);
      elsif Name = "author" then
         if From.Author.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Author.Value);
         end if;
      elsif Name = "acl_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Acl_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_View_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Name.Is_Null then
            Item.Name.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "title" then
         Item.Title.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Title.Is_Null then
            Item.Title.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "is_public" then
         Item.Is_Public.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Is_Public.Is_Null then
            Item.Is_Public.Value := Util.Beans.Objects.To_Boolean (Value);
         end if;
      elsif Name = "version" then
         Item.Version.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Version.Is_Null then
            Item.Version.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "read_count" then
         Item.Read_Count.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Read_Count.Is_Null then
            Item.Read_Count.Value := Util.Beans.Objects.To_Integer (Value);
         end if;
      elsif Name = "date" then
         Item.Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Date.Is_Null then
            Item.Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "format" then
         Item.Format.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Format.Is_Null then
            Item.Format.Value := Format_Type_Objects.To_Value (Value);
         end if;
      elsif Name = "content" then
         Item.Content.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Content.Is_Null then
            Item.Content.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "save_comment" then
         Item.Save_Comment.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Save_Comment.Is_Null then
            Item.Save_Comment.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "left_side" then
         Item.Left_Side := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "right_side" then
         Item.Right_Side := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "side_format" then
         Item.Side_Format := Format_Type_Objects.To_Value (Value);
      elsif Name = "author" then
         Item.Author.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Author.Is_Null then
            Item.Author.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "acl_id" then
         Item.Acl_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      end if;
   end Set_Value;


   --  --------------------
   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   --  --------------------
   procedure Read (Into : in out Wiki_View_Info;
                   Stmt : in out ADO.Statements.Query_Statement'Class) is
   begin
      if not Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
      Into.Id := Stmt.Get_Identifier (0);
      Into.Name := Stmt.Get_Nullable_String (1);
      Into.Title := Stmt.Get_Nullable_String (2);
      Into.Is_Public := Stmt.Get_Nullable_Boolean (3);
      Into.Version := Stmt.Get_Nullable_Integer (4);
      Into.Read_Count := Stmt.Get_Nullable_Integer (5);
      Into.Date := Stmt.Get_Nullable_Time (6);
      Into.Format.Is_Null := Stmt.Is_Null (7);
      if not Into.Format.Is_Null then
         Into.Format.Value := Format_Type'Enum_Val (Stmt.Get_Integer (7));
      end if;
      Into.Content := Stmt.Get_Nullable_String (8);
      Into.Save_Comment := Stmt.Get_Nullable_String (9);
      Into.Left_Side := Stmt.Get_Unbounded_String (10);
      Into.Right_Side := Stmt.Get_Unbounded_String (11);
      Into.Side_Format := Format_Type'Enum_Val (Stmt.Get_Integer (12));
      Into.Author := Stmt.Get_Nullable_String (13);
      Into.Acl_Id := Stmt.Get_Identifier (14);
      Stmt.Next;
   end Read;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   --  --------------------
   procedure Load (Object  : in out Wiki_View_Info'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (Context);
   begin
      Stmt.Execute;
      Read (Object, Stmt);
      if Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Op_Save (Bean    : in out Wiki_Space_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Wiki_Space_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Space_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Wiki_Space_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Space_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Load (Bean    : in out Wiki_Space_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Space_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Space_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Space_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Space_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_Space_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Space_Bean_1.Proxy'Access,
         2 => Binding_Wiki_Space_Bean_2.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Space_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Space_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Space_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "name" then
         Item.Set_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "is_public" then
         Item.Set_Is_Public (Util.Beans.Objects.To_Boolean (Value));
      elsif Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "left_side" then
         Item.Set_Left_Side (Util.Beans.Objects.To_String (Value));
      elsif Name = "right_side" then
         Item.Set_Right_Side (Util.Beans.Objects.To_String (Value));
      elsif Name = "format" then
         Item.Set_Format (Format_Type_Objects.To_Value (Value));
      end if;
   end Set_Value;

   procedure Op_Save (Bean    : in out Wiki_Page_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Wiki_Page_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Wiki_Page_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Delete (Bean    : in out Wiki_Page_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Delete (Bean    : in out Wiki_Page_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_Bean'Class (Bean).Delete (Outcome);
   end Op_Delete;
   package Binding_Wiki_Page_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_Bean,
                                                      Method => Op_Delete,
                                                      Name   => "delete");
   procedure Op_Load (Bean    : in out Wiki_Page_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Page_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Page_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");
   procedure Op_Setup (Bean    : in out Wiki_Page_Bean;
                       Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Setup (Bean    : in out Wiki_Page_Bean;
                       Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_Bean'Class (Bean).Setup (Outcome);
   end Op_Setup;
   package Binding_Wiki_Page_Bean_4 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_Bean,
                                                      Method => Op_Setup,
                                                      Name   => "setup");

   Binding_Wiki_Page_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Page_Bean_1.Proxy'Access,
         2 => Binding_Wiki_Page_Bean_2.Proxy'Access,
         3 => Binding_Wiki_Page_Bean_3.Proxy'Access,
         4 => Binding_Wiki_Page_Bean_4.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Page_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "name" then
         Item.Set_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "last_version" then
         Item.Set_Last_Version (Util.Beans.Objects.To_Integer (Value));
      elsif Name = "is_public" then
         Item.Set_Is_Public (Util.Beans.Objects.To_Boolean (Value));
      elsif Name = "title" then
         Item.Set_Title (Util.Beans.Objects.To_String (Value));
      elsif Name = "read_count" then
         Item.Set_Read_Count (Util.Beans.Objects.To_Integer (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Wiki_Page_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Page_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Page_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_Page_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Page_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Page_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Page_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "page" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page));
      elsif Name = "count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Count));
      elsif Name = "page_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Size));
      elsif Name = "tag" then
         return Util.Beans.Objects.To_Object (From.Tag);
      elsif Name = "wiki_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Wiki_Id));
      elsif Name = "sort" then
         return Util.Beans.Objects.To_Object (From.Sort);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "page" then
         Item.Page := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "count" then
         Item.Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "page_size" then
         Item.Page_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "tag" then
         Item.Tag := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "wiki_id" then
         Item.Wiki_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "sort" then
         Item.Sort := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Wiki_Version_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Version_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Version_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Version_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Version_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_Version_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Version_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Version_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Version_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Version_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "page" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page));
      elsif Name = "count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Count));
      elsif Name = "page_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Size));
      elsif Name = "wiki_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Wiki_Id));
      elsif Name = "page_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Version_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "page" then
         Item.Page := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "count" then
         Item.Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "page_size" then
         Item.Page_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "wiki_id" then
         Item.Wiki_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "page_id" then
         Item.Page_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Wiki_Page_Info_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Wiki_Page_Info_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Wiki_Page_Info_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Wiki_Page_Info_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Wiki_Page_Info_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Wiki_Page_Info_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Wiki_Page_Info_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Wiki_Page_Info_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Wiki_Page_Info_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Wiki_Page_Info_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "wiki_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Wiki_Id));
      elsif Name = "page_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Wiki_Page_Info_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "wiki_id" then
         Item.Wiki_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "page_id" then
         Item.Page_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      end if;
   end Set_Value;


end AWA.Wikis.Models;
