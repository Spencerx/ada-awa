-----------------------------------------------------------------------
--  AWA.Storages.Models -- AWA.Storages.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
with ASF.Parts.Upload_Method;
pragma Warnings (On);
package body AWA.Storages.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Storage_Data_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_DATA_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Data_Key;

   function Storage_Data_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_DATA_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Data_Key;

   function "=" (Left, Right : Storage_Data_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Storage_Data_Ref'Class;
                        Impl   : out Storage_Data_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Storage_Data_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Data_Ref) is
      Impl : Storage_Data_Access;
   begin
      Impl := new Storage_Data_Impl;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Storage_Data
   -- ----------------------------------------

   procedure Set_Id (Object : in out Storage_Data_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Storage_Data_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Storage_Data_Ref)
                  return ADO.Identifier is
      Impl : constant Storage_Data_Access
         := Storage_Data_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Storage_Data_Ref)
                  return Integer is
      Impl : constant Storage_Data_Access
         := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Data (Object : in out Storage_Data_Ref;
                       Value  : in ADO.Blob_Ref) is
      Impl : Storage_Data_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Blob (Impl.all, 3, Impl.Data, Value);
   end Set_Data;

   function Get_Data (Object : in Storage_Data_Ref)
                  return ADO.Blob_Ref is
      Impl : constant Storage_Data_Access
         := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Data;
   end Get_Data;

   --  Copy of the object.
   procedure Copy (Object : in Storage_Data_Ref;
                   Into   : in out Storage_Data_Ref) is
      Result : Storage_Data_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Storage_Data_Access
              := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Storage_Data_Access
              := new Storage_Data_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Data := Impl.Data;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Storage_Data_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Storage_Data_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Storage_Data_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, STORAGE_DATA_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Storage_Data_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Storage_Data_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Storage_Data_Impl) is
      type Storage_Data_Impl_Ptr is access all Storage_Data_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Storage_Data_Impl, Storage_Data_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Storage_Data_Impl_Ptr := Storage_Data_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, STORAGE_DATA_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORAGE_DATA_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  data
                          Value => Object.Data);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORAGE_DATA_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  data
                        Value => Object.Data);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORAGE_DATA_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_Data_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Storage_Data_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Storage_Data_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Storage_Data_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Data := Stmt.Get_Blob (2);
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Storage_Folder_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_FOLDER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Folder_Key;

   function Storage_Folder_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_FOLDER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Folder_Key;

   function "=" (Left, Right : Storage_Folder_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Storage_Folder_Ref'Class;
                        Impl   : out Storage_Folder_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Storage_Folder_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Folder_Ref) is
      Impl : Storage_Folder_Access;
   begin
      Impl := new Storage_Folder_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Storage_Folder
   -- ----------------------------------------

   procedure Set_Id (Object : in out Storage_Folder_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Storage_Folder_Ref)
                  return ADO.Identifier is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Storage_Folder_Ref)
                  return Integer is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Create_Date (Object : in out Storage_Folder_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 3, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Storage_Folder_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Name (Object : in out Storage_Folder_Ref;
                        Value : in String) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Storage_Folder_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Storage_Folder_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Storage_Folder_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Workspace (Object : in out Storage_Folder_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 5, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Storage_Folder_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;


   procedure Set_Owner (Object : in out Storage_Folder_Ref;
                        Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Storage_Folder_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.Owner, Value);
   end Set_Owner;

   function Get_Owner (Object : in Storage_Folder_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Storage_Folder_Access
         := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Owner;
   end Get_Owner;

   --  Copy of the object.
   procedure Copy (Object : in Storage_Folder_Ref;
                   Into   : in out Storage_Folder_Ref) is
      Result : Storage_Folder_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Storage_Folder_Access
              := Storage_Folder_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Storage_Folder_Access
              := new Storage_Folder_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Name := Impl.Name;
            Copy.Workspace := Impl.Workspace;
            Copy.Owner := Impl.Owner;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Storage_Folder_Access := new Storage_Folder_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Storage_Folder_Access := new Storage_Folder_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Storage_Folder_Access := new Storage_Folder_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Storage_Folder_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Storage_Folder_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Storage_Folder_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, STORAGE_FOLDER_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Storage_Folder_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Storage_Folder_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Storage_Folder_Impl) is
      type Storage_Folder_Impl_Ptr is access all Storage_Folder_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Storage_Folder_Impl, Storage_Folder_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Storage_Folder_Impl_Ptr := Storage_Folder_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, STORAGE_FOLDER_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORAGE_FOLDER_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  owner_id
                          Value => Object.Owner);
         Object.Clear_Modified (6);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Storage_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORAGE_FOLDER_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_3_2_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_4_2_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Save_Field (Name  => COL_5_2_NAME, --  owner_id
                        Value => Object.Owner);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Storage_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORAGE_FOLDER_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_Folder_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Storage_Folder_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Storage_Folder_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Storage_Folder_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (2);
      Object.Name := Stmt.Get_Unbounded_String (3);
      if not Stmt.Is_Null (4) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (4), Session);
      end if;
      if not Stmt.Is_Null (5) then
         Object.Owner.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Storage_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Key;

   function Storage_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORAGE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Key;

   function "=" (Left, Right : Storage_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Storage_Ref'Class;
                        Impl   : out Storage_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Storage_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Ref) is
      Impl : Storage_Access;
   begin
      Impl := new Storage_Impl;
      Impl.Storage := Storage_Type'First;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.File_Size := 0;
      Impl.Version := 0;
      Impl.Is_Public := False;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Storage
   -- ----------------------------------------

   procedure Set_Storage (Object : in out Storage_Ref;
                          Value  : in Storage_Type) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (Storage_Type);
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 1, Impl.Storage, Value);
   end Set_Storage;

   function Get_Storage (Object : in Storage_Ref)
                  return Storage_Type is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Storage;
   end Get_Storage;


   procedure Set_Create_Date (Object : in out Storage_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Storage_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Name (Object : in out Storage_Ref;
                        Value : in String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Storage_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Storage_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Storage_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_File_Size (Object : in out Storage_Ref;
                            Value  : in Integer) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 4, Impl.File_Size, Value);
   end Set_File_Size;

   function Get_File_Size (Object : in Storage_Ref)
                  return Integer is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.File_Size;
   end Get_File_Size;


   procedure Set_Mime_Type (Object : in out Storage_Ref;
                             Value : in String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Mime_Type, Value);
   end Set_Mime_Type;

   procedure Set_Mime_Type (Object : in out Storage_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Mime_Type, Value);
   end Set_Mime_Type;

   function Get_Mime_Type (Object : in Storage_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Mime_Type);
   end Get_Mime_Type;
   function Get_Mime_Type (Object : in Storage_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Mime_Type;
   end Get_Mime_Type;


   procedure Set_Uri (Object : in out Storage_Ref;
                       Value : in String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 6, Impl.Uri, Value);
   end Set_Uri;

   procedure Set_Uri (Object : in out Storage_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 6, Impl.Uri, Value);
   end Set_Uri;

   function Get_Uri (Object : in Storage_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Uri);
   end Get_Uri;
   function Get_Uri (Object : in Storage_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Uri;
   end Get_Uri;


   function Get_Version (Object : in Storage_Ref)
                  return Integer is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Id (Object : in out Storage_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 8, Value);
   end Set_Id;

   function Get_Id (Object : in Storage_Ref)
                  return ADO.Identifier is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Is_Public (Object : in out Storage_Ref;
                            Value  : in Boolean) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Boolean (Impl.all, 9, Impl.Is_Public, Value);
   end Set_Is_Public;

   function Get_Is_Public (Object : in Storage_Ref)
                  return Boolean is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Is_Public;
   end Get_Is_Public;


   procedure Set_Original (Object : in out Storage_Ref;
                           Value  : in Storage_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.Original, Value);
   end Set_Original;

   function Get_Original (Object : in Storage_Ref)
                  return Storage_Ref'Class is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Original;
   end Get_Original;


   procedure Set_Store_Data (Object : in out Storage_Ref;
                             Value  : in Storage_Data_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 11, Impl.Store_Data, Value);
   end Set_Store_Data;

   function Get_Store_Data (Object : in Storage_Ref)
                  return Storage_Data_Ref'Class is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Store_Data;
   end Get_Store_Data;


   procedure Set_Owner (Object : in out Storage_Ref;
                        Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 12, Impl.Owner, Value);
   end Set_Owner;

   function Get_Owner (Object : in Storage_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Owner;
   end Get_Owner;


   procedure Set_Workspace (Object : in out Storage_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 13, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Storage_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;


   procedure Set_Folder (Object : in out Storage_Ref;
                         Value  : in Storage_Folder_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 14, Impl.Folder, Value);
   end Set_Folder;

   function Get_Folder (Object : in Storage_Ref)
                  return Storage_Folder_Ref'Class is
      Impl : constant Storage_Access
         := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Folder;
   end Get_Folder;

   --  Copy of the object.
   procedure Copy (Object : in Storage_Ref;
                   Into   : in out Storage_Ref) is
      Result : Storage_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Storage_Access
              := Storage_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Storage_Access
              := new Storage_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Storage := Impl.Storage;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Name := Impl.Name;
            Copy.File_Size := Impl.File_Size;
            Copy.Mime_Type := Impl.Mime_Type;
            Copy.Uri := Impl.Uri;
            Copy.Version := Impl.Version;
            Copy.Is_Public := Impl.Is_Public;
            Copy.Original := Impl.Original;
            Copy.Store_Data := Impl.Store_Data;
            Copy.Owner := Impl.Owner;
            Copy.Workspace := Impl.Workspace;
            Copy.Folder := Impl.Folder;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Storage_Access := new Storage_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Storage_Access := new Storage_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Storage_Access := new Storage_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Storage_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Storage_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Storage_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, STORAGE_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Storage_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Storage_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Storage_Impl) is
      type Storage_Impl_Ptr is access all Storage_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Storage_Impl, Storage_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Storage_Impl_Ptr := Storage_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, STORAGE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORAGE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  storage
                          Value => Integer (Storage_Type'Enum_Rep (Object.Storage)));
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_3_NAME, --  file_size
                          Value => Object.File_Size);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_3_NAME, --  mime_type
                          Value => Object.Mime_Type);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_3_NAME, --  uri
                          Value => Object.Uri);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_3_NAME, --  is_public
                          Value => Object.Is_Public);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_3_NAME, --  original_id
                          Value => Object.Original);
         Object.Clear_Modified (10);
      end if;
      if Object.Is_Modified (11) then
         Stmt.Save_Field (Name  => COL_10_3_NAME, --  store_data_id
                          Value => Object.Store_Data);
         Object.Clear_Modified (11);
      end if;
      if Object.Is_Modified (12) then
         Stmt.Save_Field (Name  => COL_11_3_NAME, --  owner_id
                          Value => Object.Owner);
         Object.Clear_Modified (12);
      end if;
      if Object.Is_Modified (13) then
         Stmt.Save_Field (Name  => COL_12_3_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (13);
      end if;
      if Object.Is_Modified (14) then
         Stmt.Save_Field (Name  => COL_13_3_NAME, --  folder_id
                          Value => Object.Folder);
         Object.Clear_Modified (14);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORAGE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_3_NAME, --  storage
                        Value => Integer (Storage_Type'Enum_Rep (Object.Storage)));
      Query.Save_Field (Name  => COL_1_3_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_2_3_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_3_3_NAME, --  file_size
                        Value => Object.File_Size);
      Query.Save_Field (Name  => COL_4_3_NAME, --  mime_type
                        Value => Object.Mime_Type);
      Query.Save_Field (Name  => COL_5_3_NAME, --  uri
                        Value => Object.Uri);
      Query.Save_Field (Name  => COL_6_3_NAME, --  version
                        Value => Object.Version);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_7_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_8_3_NAME, --  is_public
                        Value => Object.Is_Public);
      Query.Save_Field (Name  => COL_9_3_NAME, --  original_id
                        Value => Object.Original);
      Query.Save_Field (Name  => COL_10_3_NAME, --  store_data_id
                        Value => Object.Store_Data);
      Query.Save_Field (Name  => COL_11_3_NAME, --  owner_id
                        Value => Object.Owner);
      Query.Save_Field (Name  => COL_12_3_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Save_Field (Name  => COL_13_3_NAME, --  folder_id
                        Value => Object.Folder);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORAGE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Storage_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Storage_Impl (Obj.all)'Access;
      if Name = "storage" then
         return Storage_Type_Objects.To_Object (Impl.Storage);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "file_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.File_Size));
      elsif Name = "mime_type" then
         return Util.Beans.Objects.To_Object (Impl.Mime_Type);
      elsif Name = "uri" then
         return Util.Beans.Objects.To_Object (Impl.Uri);
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (Impl.Is_Public);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Storage_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Storage := Storage_Type'Enum_Val (Stmt.Get_Integer (0));
      Object.Create_Date := Stmt.Get_Time (1);
      Object.Name := Stmt.Get_Unbounded_String (2);
      Object.File_Size := Stmt.Get_Integer (3);
      Object.Mime_Type := Stmt.Get_Unbounded_String (4);
      Object.Uri := Stmt.Get_Unbounded_String (5);
      Object.Set_Key_Value (Stmt.Get_Identifier (7));
      Object.Is_Public := Stmt.Get_Boolean (8);
      if not Stmt.Is_Null (9) then
         Object.Original.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      if not Stmt.Is_Null (10) then
         Object.Store_Data.Set_Key_Value (Stmt.Get_Identifier (10), Session);
      end if;
      if not Stmt.Is_Null (11) then
         Object.Owner.Set_Key_Value (Stmt.Get_Identifier (11), Session);
      end if;
      if not Stmt.Is_Null (12) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (12), Session);
      end if;
      if not Stmt.Is_Null (13) then
         Object.Folder.Set_Key_Value (Stmt.Get_Identifier (13), Session);
      end if;
      Object.Version := Stmt.Get_Integer (6);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Store_Local_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORE_LOCAL_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Local_Key;

   function Store_Local_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORE_LOCAL_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Local_Key;

   function "=" (Left, Right : Store_Local_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Store_Local_Ref'Class;
                        Impl   : out Store_Local_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Store_Local_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Store_Local_Ref) is
      Impl : Store_Local_Access;
   begin
      Impl := new Store_Local_Impl;
      Impl.Version := 0;
      Impl.Store_Version := 0;
      Impl.Shared := False;
      Impl.Expire_Date := ADO.DEFAULT_TIME;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Store_Local
   -- ----------------------------------------

   procedure Set_Id (Object : in out Store_Local_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Store_Local_Ref)
                  return ADO.Identifier is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Store_Local_Ref)
                  return Integer is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Store_Version (Object : in out Store_Local_Ref;
                                Value  : in Integer) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 3, Impl.Store_Version, Value);
   end Set_Store_Version;

   function Get_Store_Version (Object : in Store_Local_Ref)
                  return Integer is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Store_Version;
   end Get_Store_Version;


   procedure Set_Shared (Object : in out Store_Local_Ref;
                         Value  : in Boolean) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Boolean (Impl.all, 4, Impl.Shared, Value);
   end Set_Shared;

   function Get_Shared (Object : in Store_Local_Ref)
                  return Boolean is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Shared;
   end Get_Shared;


   procedure Set_Path (Object : in out Store_Local_Ref;
                        Value : in String) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Path, Value);
   end Set_Path;

   procedure Set_Path (Object : in out Store_Local_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Path, Value);
   end Set_Path;

   function Get_Path (Object : in Store_Local_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Path);
   end Get_Path;
   function Get_Path (Object : in Store_Local_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Path;
   end Get_Path;


   procedure Set_Expire_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 6, Impl.Expire_Date, Value);
   end Set_Expire_Date;

   function Get_Expire_Date (Object : in Store_Local_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Expire_Date;
   end Get_Expire_Date;


   procedure Set_Create_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Store_Local_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Storage (Object : in out Store_Local_Ref;
                          Value  : in Storage_Ref'Class) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Storage, Value);
   end Set_Storage;

   function Get_Storage (Object : in Store_Local_Ref)
                  return Storage_Ref'Class is
      Impl : constant Store_Local_Access
         := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Storage;
   end Get_Storage;

   --  Copy of the object.
   procedure Copy (Object : in Store_Local_Ref;
                   Into   : in out Store_Local_Ref) is
      Result : Store_Local_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Store_Local_Access
              := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Store_Local_Access
              := new Store_Local_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Store_Version := Impl.Store_Version;
            Copy.Shared := Impl.Shared;
            Copy.Path := Impl.Path;
            Copy.Expire_Date := Impl.Expire_Date;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Storage := Impl.Storage;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Store_Local_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Store_Local_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Store_Local_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, STORE_LOCAL_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Store_Local_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Store_Local_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Store_Local_Impl) is
      type Store_Local_Impl_Ptr is access all Store_Local_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Store_Local_Impl, Store_Local_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Store_Local_Impl_Ptr := Store_Local_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, STORE_LOCAL_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORE_LOCAL_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_4_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_4_NAME, --  store_version
                          Value => Object.Store_Version);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_4_NAME, --  shared
                          Value => Object.Shared);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_4_NAME, --  path
                          Value => Object.Path);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_4_NAME, --  expire_date
                          Value => Object.Expire_Date);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_4_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_4_NAME, --  storage_id
                          Value => Object.Storage);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORE_LOCAL_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_4_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_4_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_4_NAME, --  store_version
                        Value => Object.Store_Version);
      Query.Save_Field (Name  => COL_3_4_NAME, --  shared
                        Value => Object.Shared);
      Query.Save_Field (Name  => COL_4_4_NAME, --  path
                        Value => Object.Path);
      Query.Save_Field (Name  => COL_5_4_NAME, --  expire_date
                        Value => Object.Expire_Date);
      Query.Save_Field (Name  => COL_6_4_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_7_4_NAME, --  storage_id
                        Value => Object.Storage);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORE_LOCAL_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Store_Local_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Store_Local_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Store_Local_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "store_version" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Store_Version));
      elsif Name = "shared" then
         return Util.Beans.Objects.To_Object (Impl.Shared);
      elsif Name = "path" then
         return Util.Beans.Objects.To_Object (Impl.Path);
      elsif Name = "expire_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Expire_Date);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Store_Local_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Store_Version := Stmt.Get_Integer (2);
      Object.Shared := Stmt.Get_Boolean (3);
      Object.Path := Stmt.Get_Unbounded_String (4);
      Object.Expire_Date := Stmt.Get_Time (5);
      Object.Create_Date := Stmt.Get_Time (6);
      if not Stmt.Is_Null (7) then
         Object.Storage.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Folder_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Folder_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Folder_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of folders.
   --  --------------------
   procedure List (Object  : in out Folder_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Folder_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Folder_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Name := Stmt.Get_Unbounded_String (1);
         Into.Create_Date := Stmt.Get_Time (2);
      end Read;
   begin
      Stmt.Execute;
      Folder_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;

   procedure Op_Load (Bean    : in out Storage_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Storage_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Storage_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Storage_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Storage_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Storage_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Storage_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Storage_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Storage_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "folder_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Folder_Id));
      elsif Name = "folder_name" then
         return Util.Beans.Objects.To_Object (From.Folder_Name);
      elsif Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "uri" then
         return Util.Beans.Objects.To_Object (From.Uri);
      elsif Name = "storage" then
         return Storage_Type_Objects.To_Object (From.Storage);
      elsif Name = "mime_type" then
         return Util.Beans.Objects.To_Object (From.Mime_Type);
      elsif Name = "file_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.File_Size));
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (From.Is_Public);
      elsif Name = "width" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Width));
      elsif Name = "height" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Height));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Storage_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "folder_id" then
         Item.Folder_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "folder_name" then
         Item.Folder_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "uri" then
         Item.Uri := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "storage" then
         Item.Storage := Storage_Type_Objects.To_Value (Value);
      elsif Name = "mime_type" then
         Item.Mime_Type := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "file_size" then
         Item.File_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "is_public" then
         Item.Is_Public := Util.Beans.Objects.To_Boolean (Value);
      elsif Name = "width" then
         Item.Width := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "height" then
         Item.Height := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   --  --------------------
   procedure Read (Into : in out Storage_Bean;
                   Stmt : in out ADO.Statements.Query_Statement'Class) is
   begin
      if not Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
      Into.Folder_Id := Stmt.Get_Identifier (0);
      Into.Folder_Name := Stmt.Get_Unbounded_String (1);
      Into.Id := Stmt.Get_Identifier (2);
      Into.Name := Stmt.Get_Unbounded_String (3);
      Into.Create_Date := Stmt.Get_Time (4);
      Into.Uri := Stmt.Get_Unbounded_String (5);
      Into.Storage := Storage_Type'Enum_Val (Stmt.Get_Integer (6));
      Into.Mime_Type := Stmt.Get_Unbounded_String (7);
      Into.File_Size := Stmt.Get_Integer (8);
      Into.Is_Public := Stmt.Get_Boolean (9);
      Into.Width := Stmt.Get_Integer (10);
      Into.Height := Stmt.Get_Integer (11);
      Stmt.Next;
   end Read;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   --  --------------------
   procedure Load (Object  : in out Storage_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (Context);
   begin
      Stmt.Execute;
      Read (Object, Stmt);
      if Stmt.Has_Elements then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "uri" then
         return Util.Beans.Objects.To_Object (From.Uri);
      elsif Name = "storage" then
         return Storage_Type_Objects.To_Object (From.Storage);
      elsif Name = "mime_type" then
         return Util.Beans.Objects.To_Object (From.Mime_Type);
      elsif Name = "file_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.File_Size));
      elsif Name = "is_public" then
         return Util.Beans.Objects.To_Object (From.Is_Public);
      elsif Name = "user_name" then
         return Util.Beans.Objects.To_Object (From.User_Name);
      elsif Name = "thumb_width" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Thumb_Width));
      elsif Name = "thumb_height" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Thumb_Height));
      elsif Name = "thumbnail_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Thumbnail_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Storage_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "uri" then
         Item.Uri := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "storage" then
         Item.Storage := Storage_Type_Objects.To_Value (Value);
      elsif Name = "mime_type" then
         Item.Mime_Type := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "file_size" then
         Item.File_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "is_public" then
         Item.Is_Public := Util.Beans.Objects.To_Boolean (Value);
      elsif Name = "user_name" then
         Item.User_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "thumb_width" then
         Item.Thumb_Width := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "thumb_height" then
         Item.Thumb_Height := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "thumbnail_id" then
         Item.Thumbnail_Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Storage_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of documents for a given folder.
   --  --------------------
   procedure List (Object  : in out Storage_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Storage_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Storage_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Name := Stmt.Get_Unbounded_String (1);
         Into.Create_Date := Stmt.Get_Time (2);
         Into.Uri := Stmt.Get_Unbounded_String (3);
         Into.Storage := Storage_Type'Enum_Val (Stmt.Get_Integer (4));
         Into.Mime_Type := Stmt.Get_Unbounded_String (5);
         Into.File_Size := Stmt.Get_Integer (6);
         Into.Is_Public := Stmt.Get_Boolean (7);
         Into.User_Name := Stmt.Get_Unbounded_String (8);
         Into.Thumb_Width := Stmt.Get_Integer (9);
         Into.Thumb_Height := Stmt.Get_Integer (10);
         Into.Thumbnail_Id := Stmt.Get_Identifier (11);
      end Read;
   begin
      Stmt.Execute;
      Storage_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   procedure Op_Upload (Bean    : in out Upload_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Upload (Bean    : in out Upload_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Upload_Bean'Class (Bean).Upload (Outcome);
   end Op_Upload;
   package Binding_Upload_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Upload_Bean,
                                                      Method => Op_Upload,
                                                      Name   => "upload");
   procedure Op_Delete (Bean    : in out Upload_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Delete (Bean    : in out Upload_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Upload_Bean'Class (Bean).Delete (Outcome);
   end Op_Delete;
   package Binding_Upload_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Upload_Bean,
                                                      Method => Op_Delete,
                                                      Name   => "delete");
   procedure Op_Publish (Bean    : in out Upload_Bean;
                         Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Publish (Bean    : in out Upload_Bean;
                         Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Upload_Bean'Class (Bean).Publish (Outcome);
   end Op_Publish;
   package Binding_Upload_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Upload_Bean,
                                                      Method => Op_Publish,
                                                      Name   => "publish");
   procedure Op_Save_Part (Bean    : in out Upload_Bean;
                           Part : in ASF.Parts.Part'Class);
   procedure Op_Save_Part (Bean    : in out Upload_Bean;
                            Part : in ASF.Parts.Part'Class) is
   begin
      Upload_Bean'Class (Bean).Save_Part (Part);
   end Op_Save_Part;
   package Binding_Upload_Bean_4 is
     new ASF.Parts.Upload_Method.Bind (Bean   => Upload_Bean,
                                       Method => Op_Save_Part,
                                       Name   => "save_part");

   Binding_Upload_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Upload_Bean_1.Proxy'Access,
         2 => Binding_Upload_Bean_2.Proxy'Access,
         3 => Binding_Upload_Bean_3.Proxy'Access,
         4 => Binding_Upload_Bean_4.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Upload_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Upload_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Upload_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "storage" then
         Item.Set_Storage (Storage_Type_Objects.To_Value (Value));
      elsif Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "name" then
         Item.Set_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "file_size" then
         Item.Set_File_Size (Util.Beans.Objects.To_Integer (Value));
      elsif Name = "mime_type" then
         Item.Set_Mime_Type (Util.Beans.Objects.To_String (Value));
      elsif Name = "uri" then
         Item.Set_Uri (Util.Beans.Objects.To_String (Value));
      elsif Name = "is_public" then
         Item.Set_Is_Public (Util.Beans.Objects.To_Boolean (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Storage_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Storage_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Storage_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Storage_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Storage_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Storage_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Storage_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Storage_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Storage_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Storage_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Storage_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      null;
   end Set_Value;

   procedure Op_Save (Bean    : in out Folder_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Folder_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Folder_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Folder_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Folder_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");

   Binding_Folder_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Folder_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Folder_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Folder_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Folder_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "name" then
         Item.Set_Name (Util.Beans.Objects.To_String (Value));
      end if;
   end Set_Value;


end AWA.Storages.Models;
