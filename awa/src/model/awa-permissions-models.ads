-----------------------------------------------------------------------
--  AWA.Permissions.Models -- AWA.Permissions.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with ADO.Queries;
with ADO.Queries.Loaders;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
pragma Warnings (On);
package AWA.Permissions.Models is

   pragma Style_Checks ("-mrIu");

   type ACL_Ref is new ADO.Objects.Object_Ref with null record;

   type Permission_Ref is new ADO.Objects.Object_Ref with null record;

   --  --------------------
   --  The ACL table records permissions which are granted for a user to access a given database entity.
   --  --------------------
   --  Create an object key for ACL.
   function ACL_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for ACL from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function ACL_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_ACL : constant ACL_Ref;
   function "=" (Left, Right : ACL_Ref'Class) return Boolean;

   --  Set the ACL identifier
   procedure Set_Id (Object : in out Acl_Ref;
                     Value  : in ADO.Identifier);

   --  Get the ACL identifier
   function Get_Id (Object : in Acl_Ref)
                 return ADO.Identifier;

   --  Set the entity identifier to which the ACL applies
   procedure Set_Entity_Id (Object : in out Acl_Ref;
                            Value  : in ADO.Identifier);

   --  Get the entity identifier to which the ACL applies
   function Get_Entity_Id (Object : in Acl_Ref)
                 return ADO.Identifier;

   --  Set the writeable flag
   procedure Set_Writeable (Object : in out Acl_Ref;
                            Value  : in Boolean);

   --  Get the writeable flag
   function Get_Writeable (Object : in Acl_Ref)
                 return Boolean;

   --
   procedure Set_User_Id (Object : in out Acl_Ref;
                          Value  : in ADO.Identifier);

   --
   function Get_User_Id (Object : in Acl_Ref)
                 return ADO.Identifier;

   --
   procedure Set_Workspace_Id (Object : in out Acl_Ref;
                               Value  : in ADO.Identifier);

   --
   function Get_Workspace_Id (Object : in Acl_Ref)
                 return ADO.Identifier;

   --  Set the entity type concerned by the ACL.
   procedure Set_Entity_Type (Object : in out Acl_Ref;
                              Value  : in ADO.Entity_Type);

   --  Get the entity type concerned by the ACL.
   function Get_Entity_Type (Object : in Acl_Ref)
                 return ADO.Entity_Type;

   --  Set the permission that is granted.
   procedure Set_Permission (Object : in out Acl_Ref;
                             Value  : in ADO.Identifier);

   --  Get the permission that is granted.
   function Get_Permission (Object : in Acl_Ref)
                 return ADO.Identifier;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Acl_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Acl_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Acl_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Acl_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Acl_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Acl_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   ACL_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Acl_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Acl_Ref;
                   Into   : in out Acl_Ref);

   --  --------------------
   --  The permission table lists all the application permissions that are defined.
   --  This is a system table shared by every user and workspace.
   --  The list of permission is fixed and never changes.
   --  --------------------
   --  Create an object key for Permission.
   function Permission_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Permission from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Permission_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Permission : constant Permission_Ref;
   function "=" (Left, Right : Permission_Ref'Class) return Boolean;

   --  Set the permission database identifier.
   procedure Set_Id (Object : in out Permission_Ref;
                     Value  : in ADO.Identifier);

   --  Get the permission database identifier.
   function Get_Id (Object : in Permission_Ref)
                 return ADO.Identifier;

   --  Set the permission name
   procedure Set_Name (Object : in out Permission_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Permission_Ref;
                       Value : in String);

   --  Get the permission name
   function Get_Name (Object : in Permission_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Permission_Ref)
                 return String;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Permission_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Permission_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Permission_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Permission_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Permission_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Permission_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   PERMISSION_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Permission_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Permission_Ref;
                   Into   : in out Permission_Ref);



   Query_Check_Entity_Permission : constant ADO.Queries.Query_Definition_Access;

   Query_Remove_Permission : constant ADO.Queries.Query_Definition_Access;

   Query_Remove_Entity_Permission : constant ADO.Queries.Query_Definition_Access;

   Query_Remove_User_Permission : constant ADO.Queries.Query_Definition_Access;



private
   ACL_NAME : aliased constant String := "awa_acl";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "entity_id";
   COL_2_1_NAME : aliased constant String := "writeable";
   COL_3_1_NAME : aliased constant String := "user_id";
   COL_4_1_NAME : aliased constant String := "workspace_id";
   COL_5_1_NAME : aliased constant String := "entity_type";
   COL_6_1_NAME : aliased constant String := "permission";

   ACL_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count   => 7,
      Table   => ACL_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access,
         6 => COL_5_1_NAME'Access,
         7 => COL_6_1_NAME'Access)
     );
   ACL_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := ACL_DEF'Access;


   Null_ACL : constant ACL_Ref
      := ACL_Ref'(ADO.Objects.Object_Ref with null record);

   type Acl_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => ACL_DEF'Access)
   with record
       Entity_Id : ADO.Identifier;
       Writeable : Boolean;
       User_Id : ADO.Identifier;
       Workspace_Id : ADO.Identifier;
       Entity_Type : ADO.Entity_Type;
       Permission : ADO.Identifier;
   end record;

   type Acl_Access is access all Acl_Impl;

   overriding
   procedure Destroy (Object : access Acl_Impl);

   overriding
   procedure Find (Object  : in out Acl_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Acl_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Acl_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Acl_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Create (Object  : in out Acl_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Acl_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Acl_Ref'Class;
                        Impl   : out Acl_Access);
   PERMISSION_NAME : aliased constant String := "awa_permission";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "name";

   PERMISSION_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count   => 2,
      Table   => PERMISSION_NAME'Access,
      Members => (
         1 => COL_0_2_NAME'Access,
         2 => COL_1_2_NAME'Access)
     );
   PERMISSION_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := PERMISSION_DEF'Access;


   Null_Permission : constant Permission_Ref
      := Permission_Ref'(ADO.Objects.Object_Ref with null record);

   type Permission_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => PERMISSION_DEF'Access)
   with record
       Name : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   type Permission_Access is access all Permission_Impl;

   overriding
   procedure Destroy (Object : access Permission_Impl);

   overriding
   procedure Find (Object  : in out Permission_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Permission_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Permission_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Permission_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Create (Object  : in out Permission_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Permission_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Permission_Ref'Class;
                        Impl   : out Permission_Access);

   package File_1 is
      new ADO.Queries.Loaders.File (Path => "permissions.xml",
                                    Sha1 => "9B2B599473F75F92CB5AB5045675E4CCEF926543");

   package Def_Check_Entity_Permission is
      new ADO.Queries.Loaders.Query (Name => "check-entity-permission",
                                     File => File_1.File'Access);
   Query_Check_Entity_Permission : constant ADO.Queries.Query_Definition_Access
   := Def_Check_Entity_Permission.Query'Access;

   package Def_Remove_Permission is
      new ADO.Queries.Loaders.Query (Name => "remove-permission",
                                     File => File_1.File'Access);
   Query_Remove_Permission : constant ADO.Queries.Query_Definition_Access
   := Def_Remove_Permission.Query'Access;

   package Def_Remove_Entity_Permission is
      new ADO.Queries.Loaders.Query (Name => "remove-entity-permission",
                                     File => File_1.File'Access);
   Query_Remove_Entity_Permission : constant ADO.Queries.Query_Definition_Access
   := Def_Remove_Entity_Permission.Query'Access;

   package Def_Remove_User_Permission is
      new ADO.Queries.Loaders.Query (Name => "remove-user-permission",
                                     File => File_1.File'Access);
   Query_Remove_User_Permission : constant ADO.Queries.Query_Definition_Access
   := Def_Remove_User_Permission.Query'Access;
end AWA.Permissions.Models;
