-----------------------------------------------------------------------
--  AWA.OAuth.Models -- AWA.OAuth.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
pragma Warnings (On);
package body AWA.OAuth.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Application_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => APPLICATION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Application_Key;

   function Application_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => APPLICATION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Application_Key;

   function "=" (Left, Right : Application_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Application_Ref'Class;
                        Impl   : out Application_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Application_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Application_Ref) is
      Impl : Application_Access;
   begin
      Impl := new Application_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Update_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Application
   -- ----------------------------------------

   procedure Set_Id (Object : in out Application_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Application_Ref)
                  return ADO.Identifier is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Application_Ref;
                        Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Application_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Secret_Key (Object : in out Application_Ref;
                              Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Secret_Key, Value);
   end Set_Secret_Key;

   procedure Set_Secret_Key (Object : in out Application_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Secret_Key, Value);
   end Set_Secret_Key;

   function Get_Secret_Key (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Secret_Key);
   end Get_Secret_Key;
   function Get_Secret_Key (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Secret_Key;
   end Get_Secret_Key;


   procedure Set_Client_Id (Object : in out Application_Ref;
                             Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Client_Id, Value);
   end Set_Client_Id;

   procedure Set_Client_Id (Object : in out Application_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Client_Id, Value);
   end Set_Client_Id;

   function Get_Client_Id (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Client_Id);
   end Get_Client_Id;
   function Get_Client_Id (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Client_Id;
   end Get_Client_Id;


   function Get_Version (Object : in Application_Ref)
                  return Integer is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Create_Date (Object : in out Application_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 6, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Application_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Update_Date (Object : in out Application_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Update_Date, Value);
   end Set_Update_Date;

   function Get_Update_Date (Object : in Application_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Update_Date;
   end Get_Update_Date;


   procedure Set_Title (Object : in out Application_Ref;
                         Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 8, Impl.Title, Value);
   end Set_Title;

   procedure Set_Title (Object : in out Application_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 8, Impl.Title, Value);
   end Set_Title;

   function Get_Title (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Title);
   end Get_Title;
   function Get_Title (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Title;
   end Get_Title;


   procedure Set_Description (Object : in out Application_Ref;
                               Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 9, Impl.Description, Value);
   end Set_Description;

   procedure Set_Description (Object : in out Application_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 9, Impl.Description, Value);
   end Set_Description;

   function Get_Description (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Description);
   end Get_Description;
   function Get_Description (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Description;
   end Get_Description;


   procedure Set_App_Login_Url (Object : in out Application_Ref;
                                 Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 10, Impl.App_Login_Url, Value);
   end Set_App_Login_Url;

   procedure Set_App_Login_Url (Object : in out Application_Ref;
                                Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 10, Impl.App_Login_Url, Value);
   end Set_App_Login_Url;

   function Get_App_Login_Url (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_App_Login_Url);
   end Get_App_Login_Url;
   function Get_App_Login_Url (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.App_Login_Url;
   end Get_App_Login_Url;


   procedure Set_App_Logo_Url (Object : in out Application_Ref;
                                Value : in String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 11, Impl.App_Logo_Url, Value);
   end Set_App_Logo_Url;

   procedure Set_App_Logo_Url (Object : in out Application_Ref;
                               Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 11, Impl.App_Logo_Url, Value);
   end Set_App_Logo_Url;

   function Get_App_Logo_Url (Object : in Application_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_App_Logo_Url);
   end Get_App_Logo_Url;
   function Get_App_Logo_Url (Object : in Application_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.App_Logo_Url;
   end Get_App_Logo_Url;


   procedure Set_User (Object : in out Application_Ref;
                       Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Application_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 12, Impl.User, Value);
   end Set_User;

   function Get_User (Object : in Application_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Application_Access
         := Application_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User;
   end Get_User;

   --  Copy of the object.
   procedure Copy (Object : in Application_Ref;
                   Into   : in out Application_Ref) is
      Result : Application_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Application_Access
              := Application_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Application_Access
              := new Application_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Secret_Key := Impl.Secret_Key;
            Copy.Client_Id := Impl.Client_Id;
            Copy.Version := Impl.Version;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Update_Date := Impl.Update_Date;
            Copy.Title := Impl.Title;
            Copy.Description := Impl.Description;
            Copy.App_Login_Url := Impl.App_Login_Url;
            Copy.App_Logo_Url := Impl.App_Logo_Url;
            Copy.User := Impl.User;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Application_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Application_Access := new Application_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Application_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Application_Access := new Application_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Application_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Application_Access := new Application_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Application_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Application_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Application_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, APPLICATION_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Application_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Application_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Application_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Application_Impl) is
      type Application_Impl_Ptr is access all Application_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Application_Impl, Application_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Application_Impl_Ptr := Application_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Application_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, APPLICATION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Application_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Application_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (APPLICATION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  secret_key
                          Value => Object.Secret_Key);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  client_id
                          Value => Object.Client_Id);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  update_date
                          Value => Object.Update_Date);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  title
                          Value => Object.Title);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_1_NAME, --  description
                          Value => Object.Description);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_1_NAME, --  app_login_url
                          Value => Object.App_Login_Url);
         Object.Clear_Modified (10);
      end if;
      if Object.Is_Modified (11) then
         Stmt.Save_Field (Name  => COL_10_1_NAME, --  app_logo_url
                          Value => Object.App_Logo_Url);
         Object.Clear_Modified (11);
      end if;
      if Object.Is_Modified (12) then
         Stmt.Save_Field (Name  => COL_11_1_NAME, --  user_id
                          Value => Object.User);
         Object.Clear_Modified (12);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Application_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (APPLICATION_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_1_NAME, --  secret_key
                        Value => Object.Secret_Key);
      Query.Save_Field (Name  => COL_3_1_NAME, --  client_id
                        Value => Object.Client_Id);
      Query.Save_Field (Name  => COL_4_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_5_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_6_1_NAME, --  update_date
                        Value => Object.Update_Date);
      Query.Save_Field (Name  => COL_7_1_NAME, --  title
                        Value => Object.Title);
      Query.Save_Field (Name  => COL_8_1_NAME, --  description
                        Value => Object.Description);
      Query.Save_Field (Name  => COL_9_1_NAME, --  app_login_url
                        Value => Object.App_Login_Url);
      Query.Save_Field (Name  => COL_10_1_NAME, --  app_logo_url
                        Value => Object.App_Logo_Url);
      Query.Save_Field (Name  => COL_11_1_NAME, --  user_id
                        Value => Object.User);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Application_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (APPLICATION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Application_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Application_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Application_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "secret_key" then
         return Util.Beans.Objects.To_Object (Impl.Secret_Key);
      elsif Name = "client_id" then
         return Util.Beans.Objects.To_Object (Impl.Client_Id);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "update_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Update_Date);
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (Impl.Title);
      elsif Name = "description" then
         return Util.Beans.Objects.To_Object (Impl.Description);
      elsif Name = "app_login_url" then
         return Util.Beans.Objects.To_Object (Impl.App_Login_Url);
      elsif Name = "app_logo_url" then
         return Util.Beans.Objects.To_Object (Impl.App_Logo_Url);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Application_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, APPLICATION_DEF'Access);
   begin
      Stmt.Execute;
      Application_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Application_Ref;
            Impl : constant Application_Access := new Application_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Application_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Secret_Key := Stmt.Get_Unbounded_String (2);
      Object.Client_Id := Stmt.Get_Unbounded_String (3);
      Object.Create_Date := Stmt.Get_Time (5);
      Object.Update_Date := Stmt.Get_Time (6);
      Object.Title := Stmt.Get_Unbounded_String (7);
      Object.Description := Stmt.Get_Unbounded_String (8);
      Object.App_Login_Url := Stmt.Get_Unbounded_String (9);
      Object.App_Logo_Url := Stmt.Get_Unbounded_String (10);
      if not Stmt.Is_Null (11) then
         Object.User.Set_Key_Value (Stmt.Get_Identifier (11), Session);
      end if;
      Object.Version := Stmt.Get_Integer (4);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Callback_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => CALLBACK_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Callback_Key;

   function Callback_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => CALLBACK_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Callback_Key;

   function "=" (Left, Right : Callback_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Callback_Ref'Class;
                        Impl   : out Callback_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Callback_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Callback_Ref) is
      Impl : Callback_Access;
   begin
      Impl := new Callback_Impl;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Callback
   -- ----------------------------------------

   procedure Set_Id (Object : in out Callback_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Callback_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Callback_Ref)
                  return ADO.Identifier is
      Impl : constant Callback_Access
         := Callback_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Url (Object : in out Callback_Ref;
                       Value : in String) is
      Impl : Callback_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Url, Value);
   end Set_Url;

   procedure Set_Url (Object : in out Callback_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Callback_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Url, Value);
   end Set_Url;

   function Get_Url (Object : in Callback_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Url);
   end Get_Url;
   function Get_Url (Object : in Callback_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Callback_Access
         := Callback_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Url;
   end Get_Url;


   function Get_Version (Object : in Callback_Ref)
                  return Integer is
      Impl : constant Callback_Access
         := Callback_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Application (Object : in out Callback_Ref;
                              Value  : in Application_Ref'Class) is
      Impl : Callback_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 4, Impl.Application, Value);
   end Set_Application;

   function Get_Application (Object : in Callback_Ref)
                  return Application_Ref'Class is
      Impl : constant Callback_Access
         := Callback_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Application;
   end Get_Application;

   --  Copy of the object.
   procedure Copy (Object : in Callback_Ref;
                   Into   : in out Callback_Ref) is
      Result : Callback_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Callback_Access
              := Callback_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Callback_Access
              := new Callback_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Url := Impl.Url;
            Copy.Version := Impl.Version;
            Copy.Application := Impl.Application;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Callback_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Callback_Access := new Callback_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Callback_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Callback_Access := new Callback_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Callback_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Callback_Access := new Callback_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Callback_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Callback_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Callback_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, CALLBACK_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Callback_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Callback_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Callback_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Callback_Impl) is
      type Callback_Impl_Ptr is access all Callback_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Callback_Impl, Callback_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Callback_Impl_Ptr := Callback_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Callback_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, CALLBACK_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Callback_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Callback_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (CALLBACK_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  url
                          Value => Object.Url);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  application_id
                          Value => Object.Application);
         Object.Clear_Modified (4);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Callback_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (CALLBACK_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  url
                        Value => Object.Url);
      Query.Save_Field (Name  => COL_2_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_3_2_NAME, --  application_id
                        Value => Object.Application);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Callback_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (CALLBACK_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Callback_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Callback_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Callback_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "url" then
         return Util.Beans.Objects.To_Object (Impl.Url);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Callback_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, CALLBACK_DEF'Access);
   begin
      Stmt.Execute;
      Callback_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Callback_Ref;
            Impl : constant Callback_Access := new Callback_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Callback_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Url := Stmt.Get_Unbounded_String (1);
      if not Stmt.Is_Null (3) then
         Object.Application.Set_Key_Value (Stmt.Get_Identifier (3), Session);
      end if;
      Object.Version := Stmt.Get_Integer (2);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Session_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => SESSION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Session_Key;

   function Session_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => SESSION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Session_Key;

   function "=" (Left, Right : Session_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Session_Ref'Class;
                        Impl   : out Session_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Session_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Session_Ref) is
      Impl : Session_Access;
   begin
      Impl := new Session_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Expire_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Session
   -- ----------------------------------------

   procedure Set_Id (Object : in out Session_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Session_Ref)
                  return ADO.Identifier is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Create_Date (Object : in out Session_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Session_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Salt (Object : in out Session_Ref;
                        Value : in String) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Salt, Value);
   end Set_Salt;

   procedure Set_Salt (Object : in out Session_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Salt, Value);
   end Set_Salt;

   function Get_Salt (Object : in Session_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Salt);
   end Get_Salt;
   function Get_Salt (Object : in Session_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Salt;
   end Get_Salt;


   procedure Set_Expire_Date (Object : in out Session_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 4, Impl.Expire_Date, Value);
   end Set_Expire_Date;

   function Get_Expire_Date (Object : in Session_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Expire_Date;
   end Get_Expire_Date;


   procedure Set_Application (Object : in out Session_Ref;
                              Value  : in Application_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 5, Impl.Application, Value);
   end Set_Application;

   function Get_Application (Object : in Session_Ref)
                  return Application_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Application;
   end Get_Application;


   procedure Set_User (Object : in out Session_Ref;
                       Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.User, Value);
   end Set_User;

   function Get_User (Object : in Session_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User;
   end Get_User;


   procedure Set_Session (Object : in out Session_Ref;
                          Value  : in AWA.Users.Models.Session_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 7, Impl.Session, Value);
   end Set_Session;

   function Get_Session (Object : in Session_Ref)
                  return AWA.Users.Models.Session_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Session;
   end Get_Session;

   --  Copy of the object.
   procedure Copy (Object : in Session_Ref;
                   Into   : in out Session_Ref) is
      Result : Session_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Session_Access
              := Session_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Session_Access
              := new Session_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Salt := Impl.Salt;
            Copy.Expire_Date := Impl.Expire_Date;
            Copy.Application := Impl.Application;
            Copy.User := Impl.User;
            Copy.Session := Impl.Session;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Session_Access := new Session_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Session_Access := new Session_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Session_Access := new Session_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Session_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Session_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Session_Impl) is
      type Session_Impl_Ptr is access all Session_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Session_Impl, Session_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Session_Impl_Ptr := Session_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, SESSION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (SESSION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  salt
                          Value => Object.Salt);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_3_NAME, --  expire_date
                          Value => Object.Expire_Date);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_3_NAME, --  application_id
                          Value => Object.Application);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_3_NAME, --  user_id
                          Value => Object.User);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_3_NAME, --  session_id
                          Value => Object.Session);
         Object.Clear_Modified (7);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Session_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (SESSION_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_2_3_NAME, --  salt
                        Value => Object.Salt);
      Query.Save_Field (Name  => COL_3_3_NAME, --  expire_date
                        Value => Object.Expire_Date);
      Query.Save_Field (Name  => COL_4_3_NAME, --  application_id
                        Value => Object.Application);
      Query.Save_Field (Name  => COL_5_3_NAME, --  user_id
                        Value => Object.User);
      Query.Save_Field (Name  => COL_6_3_NAME, --  session_id
                        Value => Object.Session);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Session_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (SESSION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Session_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Session_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Session_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "salt" then
         return Util.Beans.Objects.To_Object (Impl.Salt);
      elsif Name = "expire_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Expire_Date);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Session_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, SESSION_DEF'Access);
   begin
      Stmt.Execute;
      Session_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Session_Ref;
            Impl : constant Session_Access := new Session_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Session_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (1);
      Object.Salt := Stmt.Get_Unbounded_String (2);
      Object.Expire_Date := Stmt.Get_Time (3);
      if not Stmt.Is_Null (4) then
         Object.Application.Set_Key_Value (Stmt.Get_Identifier (4), Session);
      end if;
      if not Stmt.Is_Null (5) then
         Object.User.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      if not Stmt.Is_Null (6) then
         Object.Session.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;


end AWA.OAuth.Models;
