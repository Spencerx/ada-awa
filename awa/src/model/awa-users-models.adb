-----------------------------------------------------------------------
--  AWA.Users.Models -- AWA.Users.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
pragma Warnings (On);
package body AWA.Users.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Email_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => EMAIL_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Email_Key;

   function Email_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => EMAIL_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Email_Key;

   function "=" (Left, Right : Email_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Email_Ref'Class;
                        Impl   : out Email_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Email_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Email_Ref) is
      Impl : Email_Access;
   begin
      Impl := new Email_Impl;
      Impl.Status := MailDeliveryStatus'First;
      Impl.Last_Error_Date := ADO.DEFAULT_TIME;
      Impl.Version := 0;
      Impl.User_Id := ADO.NO_IDENTIFIER;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Email
   -- ----------------------------------------

   procedure Set_Email (Object : in out Email_Ref;
                         Value : in String) is
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 1, Impl.Email, Value);
   end Set_Email;

   procedure Set_Email (Object : in out Email_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 1, Impl.Email, Value);
   end Set_Email;

   function Get_Email (Object : in Email_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Email);
   end Get_Email;
   function Get_Email (Object : in Email_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Email;
   end Get_Email;


   procedure Set_Status (Object : in out Email_Ref;
                         Value  : in MailDeliveryStatus) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (MailDeliveryStatus);
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 2, Impl.Status, Value);
   end Set_Status;

   function Get_Status (Object : in Email_Ref)
                  return MailDeliveryStatus is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Status;
   end Get_Status;


   procedure Set_Last_Error_Date (Object : in out Email_Ref;
                                  Value  : in Ada.Calendar.Time) is
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 3, Impl.Last_Error_Date, Value);
   end Set_Last_Error_Date;

   function Get_Last_Error_Date (Object : in Email_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Error_Date;
   end Get_Last_Error_Date;


   function Get_Version (Object : in Email_Ref)
                  return Integer is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Id (Object : in out Email_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 5, Value);
   end Set_Id;

   function Get_Id (Object : in Email_Ref)
                  return ADO.Identifier is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_User_Id (Object : in out Email_Ref;
                          Value  : in ADO.Identifier) is
      Impl : Email_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 6, Impl.User_Id, Value);
   end Set_User_Id;

   function Get_User_Id (Object : in Email_Ref)
                  return ADO.Identifier is
      Impl : constant Email_Access
         := Email_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User_Id;
   end Get_User_Id;

   --  Copy of the object.
   procedure Copy (Object : in Email_Ref;
                   Into   : in out Email_Ref) is
      Result : Email_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Email_Access
              := Email_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Email_Access
              := new Email_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Email := Impl.Email;
            Copy.Status := Impl.Status;
            Copy.Last_Error_Date := Impl.Last_Error_Date;
            Copy.Version := Impl.Version;
            Copy.User_Id := Impl.User_Id;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Email_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Email_Access := new Email_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Email_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Email_Access := new Email_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Email_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Email_Access := new Email_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Email_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Email_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Email_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, EMAIL_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Email_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Email_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Email_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Email_Impl) is
      type Email_Impl_Ptr is access all Email_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Email_Impl, Email_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Email_Impl_Ptr := Email_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Email_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, EMAIL_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Email_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Email_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (EMAIL_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  email
                          Value => Object.Email);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  status
                          Value => Integer (MailDeliveryStatus'Enum_Rep (Object.Status)));
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  last_error_date
                          Value => Object.Last_Error_Date);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  user_id
                          Value => Object.User_Id);
         Object.Clear_Modified (6);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Email_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (EMAIL_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_1_NAME, --  email
                        Value => Object.Email);
      Query.Save_Field (Name  => COL_1_1_NAME, --  status
                        Value => Integer (MailDeliveryStatus'Enum_Rep (Object.Status)));
      Query.Save_Field (Name  => COL_2_1_NAME, --  last_error_date
                        Value => Object.Last_Error_Date);
      Query.Save_Field (Name  => COL_3_1_NAME, --  version
                        Value => Object.Version);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_4_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_5_1_NAME, --  user_id
                        Value => Object.User_Id);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Email_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (EMAIL_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Email_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Email_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Email_Impl (Obj.all)'Access;
      if Name = "email" then
         return Util.Beans.Objects.To_Object (Impl.Email);
      elsif Name = "status" then
         return MailDeliveryStatus_Objects.To_Object (Impl.Status);
      elsif Name = "last_error_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Last_Error_Date);
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "user_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.User_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Email_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Email := Stmt.Get_Unbounded_String (0);
      Object.Status := MailDeliveryStatus'Enum_Val (Stmt.Get_Integer (1));
      Object.Last_Error_Date := Stmt.Get_Time (2);
      Object.Set_Key_Value (Stmt.Get_Identifier (4));
      Object.User_Id := Stmt.Get_Identifier (5);
      Object.Version := Stmt.Get_Integer (3);
      ADO.Objects.Set_Created (Object);
   end Load;
   function User_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => USER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end User_Key;

   function User_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => USER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end User_Key;

   function "=" (Left, Right : User_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out User_Ref'Class;
                        Impl   : out User_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := User_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out User_Ref) is
      Impl : User_Access;
   begin
      Impl := new User_Impl;
      Impl.Version := 0;
      Impl.Status := Status_Type'First;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: User
   -- ----------------------------------------

   procedure Set_First_Name (Object : in out User_Ref;
                              Value : in String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 1, Impl.First_Name, Value);
   end Set_First_Name;

   procedure Set_First_Name (Object : in out User_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 1, Impl.First_Name, Value);
   end Set_First_Name;

   function Get_First_Name (Object : in User_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_First_Name);
   end Get_First_Name;
   function Get_First_Name (Object : in User_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.First_Name;
   end Get_First_Name;


   procedure Set_Last_Name (Object : in out User_Ref;
                             Value : in String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 2, Impl.Last_Name, Value);
   end Set_Last_Name;

   procedure Set_Last_Name (Object : in out User_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 2, Impl.Last_Name, Value);
   end Set_Last_Name;

   function Get_Last_Name (Object : in User_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Last_Name);
   end Get_Last_Name;
   function Get_Last_Name (Object : in User_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Name;
   end Get_Last_Name;


   procedure Set_Country (Object : in out User_Ref;
                           Value : in String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 3, Impl.Country, Value);
   end Set_Country;

   procedure Set_Country (Object : in out User_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 3, Impl.Country, Value);
   end Set_Country;

   function Get_Country (Object : in User_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Country);
   end Get_Country;
   function Get_Country (Object : in User_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Country;
   end Get_Country;


   procedure Set_Name (Object : in out User_Ref;
                        Value : in String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 4, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out User_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 4, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in User_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in User_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   function Get_Version (Object : in User_Ref)
                  return Integer is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Id (Object : in out User_Ref;
                     Value  : in ADO.Identifier) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 6, Value);
   end Set_Id;

   function Get_Id (Object : in User_Ref)
                  return ADO.Identifier is
      Impl : constant User_Access
         := User_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Status (Object : in out User_Ref;
                         Value  : in Status_Type) is
      procedure Set_Field_Discrete is
        new ADO.Audits.Set_Field_Operation
          (Status_Type,
           Status_Type_Objects.To_Object);
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 7, Impl.Status, Value);
   end Set_Status;

   function Get_Status (Object : in User_Ref)
                  return Status_Type is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Status;
   end Get_Status;


   procedure Set_Email (Object : in out User_Ref;
                        Value  : in Email_Ref'Class) is
      Impl : User_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Email, Value);
   end Set_Email;

   function Get_Email (Object : in User_Ref)
                  return Email_Ref'Class is
      Impl : constant User_Access
         := User_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Email;
   end Get_Email;

   --  Copy of the object.
   procedure Copy (Object : in User_Ref;
                   Into   : in out User_Ref) is
      Result : User_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant User_Access
              := User_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant User_Access
              := new User_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.First_Name := Impl.First_Name;
            Copy.Last_Name := Impl.Last_Name;
            Copy.Country := Impl.Country;
            Copy.Name := Impl.Name;
            Copy.Version := Impl.Version;
            Copy.Status := Impl.Status;
            Copy.Email := Impl.Email;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out User_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant User_Access := new User_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out User_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant User_Access := new User_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out User_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant User_Access := new User_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out User_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : User_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := User_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, USER_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out User_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new User_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out User_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access User_Impl) is
      type User_Impl_Ptr is access all User_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (User_Impl, User_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : User_Impl_Ptr := User_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out User_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, USER_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out User_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out User_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (USER_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  first_name
                          Value => Object.First_Name);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  last_name
                          Value => Object.Last_Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  country
                          Value => Object.Country);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  status
                          Value => Integer (Status_Type'Enum_Rep (Object.Status)));
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  email_id
                          Value => Object.Email);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
            ADO.Audits.Save (Object, Session);
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out User_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (USER_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_2_NAME, --  first_name
                        Value => Object.First_Name);
      Query.Save_Field (Name  => COL_1_2_NAME, --  last_name
                        Value => Object.Last_Name);
      Query.Save_Field (Name  => COL_2_2_NAME, --  country
                        Value => Object.Country);
      Query.Save_Field (Name  => COL_3_2_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_4_2_NAME, --  version
                        Value => Object.Version);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_5_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_6_2_NAME, --  status
                        Value => Integer (Status_Type'Enum_Rep (Object.Status)));
      Query.Save_Field (Name  => COL_7_2_NAME, --  email_id
                        Value => Object.Email);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
      ADO.Audits.Save (Object, Session);
   end Create;

   overriding
   procedure Delete (Object  : in out User_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (USER_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in User_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access User_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := User_Impl (Obj.all)'Access;
      if Name = "first_name" then
         return Util.Beans.Objects.To_Object (Impl.First_Name);
      elsif Name = "last_name" then
         return Util.Beans.Objects.To_Object (Impl.Last_Name);
      elsif Name = "country" then
         return Util.Beans.Objects.To_Object (Impl.Country);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "status" then
         return Status_Type_Objects.To_Object (Impl.Status);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out User_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.First_Name := Stmt.Get_Unbounded_String (0);
      Object.Last_Name := Stmt.Get_Unbounded_String (1);
      Object.Country := Stmt.Get_Unbounded_String (2);
      Object.Name := Stmt.Get_Unbounded_String (3);
      Object.Set_Key_Value (Stmt.Get_Identifier (5));
      Object.Status := Status_Type'Enum_Val (Stmt.Get_Integer (6));
      if not Stmt.Is_Null (7) then
         Object.Email.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (4);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Access_Key_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ACCESS_KEY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Access_Key_Key;

   function Access_Key_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ACCESS_KEY_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Access_Key_Key;

   function "=" (Left, Right : Access_Key_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Access_Key_Ref'Class;
                        Impl   : out Access_Key_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Access_Key_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Access_Key_Ref) is
      Impl : Access_Key_Access;
   begin
      Impl := new Access_Key_Impl;
      Impl.Expire_Date := ADO.DEFAULT_TIME;
      Impl.Version := 0;
      Impl.Kind := Key_Type'First;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Access_Key
   -- ----------------------------------------

   procedure Set_Access_Key (Object : in out Access_Key_Ref;
                              Value : in String) is
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 1, Impl.Access_Key, Value);
   end Set_Access_Key;

   procedure Set_Access_Key (Object : in out Access_Key_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 1, Impl.Access_Key, Value);
   end Set_Access_Key;

   function Get_Access_Key (Object : in Access_Key_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Access_Key);
   end Get_Access_Key;
   function Get_Access_Key (Object : in Access_Key_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Access_Key;
   end Get_Access_Key;


   procedure Set_Expire_Date (Object : in out Access_Key_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Expire_Date, Value);
   end Set_Expire_Date;

   function Get_Expire_Date (Object : in Access_Key_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Expire_Date;
   end Get_Expire_Date;


   procedure Set_Id (Object : in out Access_Key_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 3, Value);
   end Set_Id;

   function Get_Id (Object : in Access_Key_Ref)
                  return ADO.Identifier is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Access_Key_Ref)
                  return Integer is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Kind (Object : in out Access_Key_Ref;
                       Value  : in Key_Type) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (Key_Type);
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 5, Impl.Kind, Value);
   end Set_Kind;

   function Get_Kind (Object : in Access_Key_Ref)
                  return Key_Type is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Kind;
   end Get_Kind;


   procedure Set_User (Object : in out Access_Key_Ref;
                       Value  : in User_Ref'Class) is
      Impl : Access_Key_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.User, Value);
   end Set_User;

   function Get_User (Object : in Access_Key_Ref)
                  return User_Ref'Class is
      Impl : constant Access_Key_Access
         := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User;
   end Get_User;

   --  Copy of the object.
   procedure Copy (Object : in Access_Key_Ref;
                   Into   : in out Access_Key_Ref) is
      Result : Access_Key_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Access_Key_Access
              := Access_Key_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Access_Key_Access
              := new Access_Key_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Access_Key := Impl.Access_Key;
            Copy.Expire_Date := Impl.Expire_Date;
            Copy.Version := Impl.Version;
            Copy.Kind := Impl.Kind;
            Copy.User := Impl.User;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Access_Key_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Access_Key_Access := new Access_Key_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Access_Key_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Access_Key_Access := new Access_Key_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Access_Key_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Access_Key_Access := new Access_Key_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Access_Key_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Access_Key_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Access_Key_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, ACCESS_KEY_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Access_Key_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Access_Key_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Access_Key_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Access_Key_Impl) is
      type Access_Key_Impl_Ptr is access all Access_Key_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Access_Key_Impl, Access_Key_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Access_Key_Impl_Ptr := Access_Key_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Access_Key_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, ACCESS_KEY_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Access_Key_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Access_Key_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (ACCESS_KEY_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  access_key
                          Value => Object.Access_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  expire_date
                          Value => Object.Expire_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_3_NAME, --  kind
                          Value => Integer (Key_Type'Enum_Rep (Object.Kind)));
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_3_NAME, --  user_id
                          Value => Object.User);
         Object.Clear_Modified (6);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Access_Key_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (ACCESS_KEY_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_3_NAME, --  access_key
                        Value => Object.Access_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  expire_date
                        Value => Object.Expire_Date);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_2_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_3_3_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_4_3_NAME, --  kind
                        Value => Integer (Key_Type'Enum_Rep (Object.Kind)));
      Query.Save_Field (Name  => COL_5_3_NAME, --  user_id
                        Value => Object.User);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Access_Key_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (ACCESS_KEY_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Access_Key_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Access_Key_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Access_Key_Impl (Obj.all)'Access;
      if Name = "access_key" then
         return Util.Beans.Objects.To_Object (Impl.Access_Key);
      elsif Name = "expire_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Expire_Date);
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "kind" then
         return Key_Type_Objects.To_Object (Impl.Kind);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Access_Key_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Access_Key := Stmt.Get_Unbounded_String (0);
      Object.Expire_Date := Stmt.Get_Time (1);
      Object.Set_Key_Value (Stmt.Get_Identifier (2));
      Object.Kind := Key_Type'Enum_Val (Stmt.Get_Integer (4));
      if not Stmt.Is_Null (5) then
         Object.User.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      Object.Version := Stmt.Get_Integer (3);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Authenticate_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => AUTHENTICATE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Authenticate_Key;

   function Authenticate_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => AUTHENTICATE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Authenticate_Key;

   function "=" (Left, Right : Authenticate_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Authenticate_Ref'Class;
                        Impl   : out Authenticate_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Authenticate_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Authenticate_Ref) is
      Impl : Authenticate_Access;
   begin
      Impl := new Authenticate_Impl;
      Impl.Version := 0;
      Impl.Method := Authenticate_Type'First;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Authenticate
   -- ----------------------------------------

   procedure Set_Id (Object : in out Authenticate_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Authenticate_Ref)
                  return ADO.Identifier is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Authenticate_Ref)
                  return Integer is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Ident (Object : in out Authenticate_Ref;
                         Value : in String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Ident, Value);
   end Set_Ident;

   procedure Set_Ident (Object : in out Authenticate_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Ident, Value);
   end Set_Ident;

   function Get_Ident (Object : in Authenticate_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Ident);
   end Get_Ident;
   function Get_Ident (Object : in Authenticate_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Ident;
   end Get_Ident;


   procedure Set_Salt (Object : in out Authenticate_Ref;
                        Value : in String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Salt, Value);
   end Set_Salt;

   procedure Set_Salt (Object : in out Authenticate_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Salt, Value);
   end Set_Salt;

   function Get_Salt (Object : in Authenticate_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Salt);
   end Get_Salt;
   function Get_Salt (Object : in Authenticate_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Salt;
   end Get_Salt;


   procedure Set_Hash (Object : in out Authenticate_Ref;
                        Value : in String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Hash, Value);
   end Set_Hash;

   procedure Set_Hash (Object : in out Authenticate_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Hash, Value);
   end Set_Hash;

   function Get_Hash (Object : in Authenticate_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Hash);
   end Get_Hash;
   function Get_Hash (Object : in Authenticate_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Hash;
   end Get_Hash;


   procedure Set_Method (Object : in out Authenticate_Ref;
                         Value  : in Authenticate_Type) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (Authenticate_Type);
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 6, Impl.Method, Value);
   end Set_Method;

   function Get_Method (Object : in Authenticate_Ref)
                  return Authenticate_Type is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Method;
   end Get_Method;


   procedure Set_Email (Object : in out Authenticate_Ref;
                        Value  : in Email_Ref'Class) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 7, Impl.Email, Value);
   end Set_Email;

   function Get_Email (Object : in Authenticate_Ref)
                  return Email_Ref'Class is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Email;
   end Get_Email;


   procedure Set_User (Object : in out Authenticate_Ref;
                       Value  : in User_Ref'Class) is
      Impl : Authenticate_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.User, Value);
   end Set_User;

   function Get_User (Object : in Authenticate_Ref)
                  return User_Ref'Class is
      Impl : constant Authenticate_Access
         := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User;
   end Get_User;

   --  Copy of the object.
   procedure Copy (Object : in Authenticate_Ref;
                   Into   : in out Authenticate_Ref) is
      Result : Authenticate_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Authenticate_Access
              := Authenticate_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Authenticate_Access
              := new Authenticate_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Ident := Impl.Ident;
            Copy.Salt := Impl.Salt;
            Copy.Hash := Impl.Hash;
            Copy.Method := Impl.Method;
            Copy.Email := Impl.Email;
            Copy.User := Impl.User;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Authenticate_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Authenticate_Access := new Authenticate_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Authenticate_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Authenticate_Access := new Authenticate_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Authenticate_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Authenticate_Access := new Authenticate_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Authenticate_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Authenticate_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Authenticate_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, AUTHENTICATE_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Authenticate_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Authenticate_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Authenticate_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Authenticate_Impl) is
      type Authenticate_Impl_Ptr is access all Authenticate_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Authenticate_Impl, Authenticate_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Authenticate_Impl_Ptr := Authenticate_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Authenticate_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, AUTHENTICATE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Authenticate_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Authenticate_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (AUTHENTICATE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_4_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_4_NAME, --  ident
                          Value => Object.Ident);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_4_NAME, --  salt
                          Value => Object.Salt);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_4_NAME, --  hash
                          Value => Object.Hash);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_4_NAME, --  method
                          Value => Integer (Authenticate_Type'Enum_Rep (Object.Method)));
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_4_NAME, --  email_id
                          Value => Object.Email);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_4_NAME, --  user_id
                          Value => Object.User);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Authenticate_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (AUTHENTICATE_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_4_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_4_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_4_NAME, --  ident
                        Value => Object.Ident);
      Query.Save_Field (Name  => COL_3_4_NAME, --  salt
                        Value => Object.Salt);
      Query.Save_Field (Name  => COL_4_4_NAME, --  hash
                        Value => Object.Hash);
      Query.Save_Field (Name  => COL_5_4_NAME, --  method
                        Value => Integer (Authenticate_Type'Enum_Rep (Object.Method)));
      Query.Save_Field (Name  => COL_6_4_NAME, --  email_id
                        Value => Object.Email);
      Query.Save_Field (Name  => COL_7_4_NAME, --  user_id
                        Value => Object.User);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Authenticate_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (AUTHENTICATE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Authenticate_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Authenticate_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Authenticate_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "ident" then
         return Util.Beans.Objects.To_Object (Impl.Ident);
      elsif Name = "salt" then
         return Util.Beans.Objects.To_Object (Impl.Salt);
      elsif Name = "hash" then
         return Util.Beans.Objects.To_Object (Impl.Hash);
      elsif Name = "method" then
         return Authenticate_Type_Objects.To_Object (Impl.Method);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Authenticate_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, AUTHENTICATE_DEF'Access);
   begin
      Stmt.Execute;
      Authenticate_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Authenticate_Ref;
            Impl : constant Authenticate_Access := new Authenticate_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Authenticate_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Ident := Stmt.Get_Unbounded_String (2);
      Object.Salt := Stmt.Get_Unbounded_String (3);
      Object.Hash := Stmt.Get_Unbounded_String (4);
      Object.Method := Authenticate_Type'Enum_Val (Stmt.Get_Integer (5));
      if not Stmt.Is_Null (6) then
         Object.Email.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      if not Stmt.Is_Null (7) then
         Object.User.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Session_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => SESSION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Session_Key;

   function Session_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => SESSION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Session_Key;

   function "=" (Left, Right : Session_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Session_Ref'Class;
                        Impl   : out Session_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Session_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Session_Ref) is
      Impl : Session_Access;
   begin
      Impl := new Session_Impl;
      Impl.Start_Date := ADO.DEFAULT_TIME;
      Impl.End_Date.Is_Null := True;
      Impl.Stype := Session_Type'First;
      Impl.Version := 0;
      Impl.Server_Id := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Session
   -- ----------------------------------------

   procedure Set_Start_Date (Object : in out Session_Ref;
                             Value  : in Ada.Calendar.Time) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 1, Impl.Start_Date, Value);
   end Set_Start_Date;

   function Get_Start_Date (Object : in Session_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Start_Date;
   end Get_Start_Date;


   procedure Set_End_Date (Object : in out Session_Ref;
                           Value  : in ADO.Nullable_Time) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.End_Date, Value);
   end Set_End_Date;

   function Get_End_Date (Object : in Session_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.End_Date;
   end Get_End_Date;


   procedure Set_Ip_Address (Object : in out Session_Ref;
                              Value : in String) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Ip_Address, Value);
   end Set_Ip_Address;

   procedure Set_Ip_Address (Object : in out Session_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Ip_Address, Value);
   end Set_Ip_Address;

   function Get_Ip_Address (Object : in Session_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Ip_Address);
   end Get_Ip_Address;
   function Get_Ip_Address (Object : in Session_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Ip_Address;
   end Get_Ip_Address;


   procedure Set_Stype (Object : in out Session_Ref;
                        Value  : in Session_Type) is
      procedure Set_Field_Discrete is
        new ADO.Objects.Set_Field_Operation
          (Session_Type);
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 4, Impl.Stype, Value);
   end Set_Stype;

   function Get_Stype (Object : in Session_Ref)
                  return Session_Type is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Stype;
   end Get_Stype;


   function Get_Version (Object : in Session_Ref)
                  return Integer is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Server_Id (Object : in out Session_Ref;
                            Value  : in Integer) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 6, Impl.Server_Id, Value);
   end Set_Server_Id;

   function Get_Server_Id (Object : in Session_Ref)
                  return Integer is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Server_Id;
   end Get_Server_Id;


   procedure Set_Id (Object : in out Session_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 7, Value);
   end Set_Id;

   function Get_Id (Object : in Session_Ref)
                  return ADO.Identifier is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Auth (Object : in out Session_Ref;
                       Value  : in Session_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Auth, Value);
   end Set_Auth;

   function Get_Auth (Object : in Session_Ref)
                  return Session_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Auth;
   end Get_Auth;


   procedure Set_User (Object : in out Session_Ref;
                       Value  : in User_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.User, Value);
   end Set_User;

   function Get_User (Object : in Session_Ref)
                  return User_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User;
   end Get_User;


   procedure Set_User_Auth (Object : in out Session_Ref;
                            Value  : in Authenticate_Ref'Class) is
      Impl : Session_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.User_Auth, Value);
   end Set_User_Auth;

   function Get_User_Auth (Object : in Session_Ref)
                  return Authenticate_Ref'Class is
      Impl : constant Session_Access
         := Session_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.User_Auth;
   end Get_User_Auth;

   --  Copy of the object.
   procedure Copy (Object : in Session_Ref;
                   Into   : in out Session_Ref) is
      Result : Session_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Session_Access
              := Session_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Session_Access
              := new Session_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Start_Date := Impl.Start_Date;
            Copy.End_Date := Impl.End_Date;
            Copy.Ip_Address := Impl.Ip_Address;
            Copy.Stype := Impl.Stype;
            Copy.Version := Impl.Version;
            Copy.Server_Id := Impl.Server_Id;
            Copy.Auth := Impl.Auth;
            Copy.User := Impl.User;
            Copy.User_Auth := Impl.User_Auth;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Session_Access := new Session_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Session_Access := new Session_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Session_Access := new Session_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Session_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Session_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Session_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, SESSION_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Session_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Session_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Session_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Session_Impl) is
      type Session_Impl_Ptr is access all Session_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Session_Impl, Session_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Session_Impl_Ptr := Session_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, SESSION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Session_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (SESSION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_5_NAME, --  start_date
                          Value => Object.Start_Date);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_5_NAME, --  end_date
                          Value => Object.End_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_5_NAME, --  ip_address
                          Value => Object.Ip_Address);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_5_NAME, --  stype
                          Value => Integer (Session_Type'Enum_Rep (Object.Stype)));
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_5_NAME, --  server_id
                          Value => Object.Server_Id);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_5_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_5_NAME, --  auth_id
                          Value => Object.Auth);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_5_NAME, --  user_id
                          Value => Object.User);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_5_NAME, --  user_auth_id
                          Value => Object.User_Auth);
         Object.Clear_Modified (10);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Session_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (SESSION_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Query.Save_Field (Name  => COL_0_5_NAME, --  start_date
                        Value => Object.Start_Date);
      Query.Save_Field (Name  => COL_1_5_NAME, --  end_date
                        Value => Object.End_Date);
      Query.Save_Field (Name  => COL_2_5_NAME, --  ip_address
                        Value => Object.Ip_Address);
      Query.Save_Field (Name  => COL_3_5_NAME, --  stype
                        Value => Integer (Session_Type'Enum_Rep (Object.Stype)));
      Query.Save_Field (Name  => COL_4_5_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_5_5_NAME, --  server_id
                        Value => Object.Server_Id);
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_6_5_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_7_5_NAME, --  auth_id
                        Value => Object.Auth);
      Query.Save_Field (Name  => COL_8_5_NAME, --  user_id
                        Value => Object.User);
      Query.Save_Field (Name  => COL_9_5_NAME, --  user_auth_id
                        Value => Object.User_Auth);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Session_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (SESSION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Session_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Session_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Session_Impl (Obj.all)'Access;
      if Name = "start_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Start_Date);
      elsif Name = "end_date" then
         if Impl.End_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.End_Date.Value);
         end if;
      elsif Name = "ip_address" then
         return Util.Beans.Objects.To_Object (Impl.Ip_Address);
      elsif Name = "stype" then
         return Session_Type_Objects.To_Object (Impl.Stype);
      elsif Name = "server_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Server_Id));
      elsif Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Session_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Start_Date := Stmt.Get_Time (0);
      Object.End_Date := Stmt.Get_Nullable_Time (1);
      Object.Ip_Address := Stmt.Get_Unbounded_String (2);
      Object.Stype := Session_Type'Enum_Val (Stmt.Get_Integer (3));
      Object.Server_Id := Stmt.Get_Integer (5);
      Object.Set_Key_Value (Stmt.Get_Identifier (6));
      if not Stmt.Is_Null (7) then
         Object.Auth.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      if not Stmt.Is_Null (8) then
         Object.User.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      if not Stmt.Is_Null (9) then
         Object.User_Auth.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      Object.Version := Stmt.Get_Integer (4);
      ADO.Objects.Set_Created (Object);
   end Load;

   procedure Op_Authenticate (Bean    : in out Authenticate_Bean;
                              Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Authenticate (Bean    : in out Authenticate_Bean;
                              Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Authenticate (Outcome);
   end Op_Authenticate;
   package Binding_Authenticate_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Authenticate,
                                                      Name   => "authenticate");
   procedure Op_Register (Bean    : in out Authenticate_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Register (Bean    : in out Authenticate_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Register (Outcome);
   end Op_Register;
   package Binding_Authenticate_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Register,
                                                      Name   => "register");
   procedure Op_Lost_Password (Bean    : in out Authenticate_Bean;
                               Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Lost_Password (Bean    : in out Authenticate_Bean;
                               Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Lost_Password (Outcome);
   end Op_Lost_Password;
   package Binding_Authenticate_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Lost_Password,
                                                      Name   => "lost_password");
   procedure Op_Logout (Bean    : in out Authenticate_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Logout (Bean    : in out Authenticate_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Logout (Outcome);
   end Op_Logout;
   package Binding_Authenticate_Bean_4 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Logout,
                                                      Name   => "logout");
   procedure Op_Load (Bean    : in out Authenticate_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Authenticate_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Authenticate_Bean_5 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");
   procedure Op_Auth_Error (Bean    : in out Authenticate_Bean;
                            Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Auth_Error (Bean    : in out Authenticate_Bean;
                            Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Auth_Error (Outcome);
   end Op_Auth_Error;
   package Binding_Authenticate_Bean_6 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Auth_Error,
                                                      Name   => "auth_error");
   procedure Op_Reset_Password (Bean    : in out Authenticate_Bean;
                                Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Reset_Password (Bean    : in out Authenticate_Bean;
                                Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Authenticate_Bean'Class (Bean).Reset_Password (Outcome);
   end Op_Reset_Password;
   package Binding_Authenticate_Bean_7 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Authenticate_Bean,
                                                      Method => Op_Reset_Password,
                                                      Name   => "reset_password");

   Binding_Authenticate_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Authenticate_Bean_1.Proxy'Access,
         2 => Binding_Authenticate_Bean_2.Proxy'Access,
         3 => Binding_Authenticate_Bean_3.Proxy'Access,
         4 => Binding_Authenticate_Bean_4.Proxy'Access,
         5 => Binding_Authenticate_Bean_5.Proxy'Access,
         6 => Binding_Authenticate_Bean_6.Proxy'Access,
         7 => Binding_Authenticate_Bean_7.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Authenticate_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Authenticate_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Authenticate_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Authenticate_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      null;
   end Set_Value;


end AWA.Users.Models;
